/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JournalingPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  journalFolder: "journals",
  dateFormat: "YYYY-MM-DD",
  sortDirection: "newest-first",
  defaultExpandEntries: true
};
var JournalingSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Continuous Journaling Settings" });
    new import_obsidian.Setting(containerEl).setName("Journal Folder").setDesc("Specify the folder where journal entries will be stored").addText((text) => text.setPlaceholder("journals").setValue(this.plugin.settings.journalFolder).onChange(async (value) => {
      this.plugin.settings.journalFolder = value.replace(/^\/+|\/+$/g, "");
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Date Format").setDesc("Format for journal filenames (YYYY-MM-DD recommended)").addText((text) => text.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async (value) => {
      this.plugin.settings.dateFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sort Direction").setDesc("How to sort journal entries in the continuous view").addDropdown((dropdown) => dropdown.addOption("newest-first", "Newest entries first").addOption("oldest-first", "Oldest entries first").setValue(this.plugin.settings.sortDirection).onChange(async (value) => {
      this.plugin.settings.sortDirection = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Expand Entries").setDesc("Automatically expand entries when opening the journals view").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultExpandEntries).onChange(async (value) => {
      this.plugin.settings.defaultExpandEntries = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/journal-view.ts
var import_obsidian3 = require("obsidian");

// src/utils/date-utils.ts
function getTodayDate() {
  const today = new Date();
  return formatDateString(today);
}
function formatDateString(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}
function formatDateForDisplay(dateString) {
  const date = new Date(dateString);
  const dateFormatOptions = {
    month: "short",
    year: "numeric",
    day: "numeric"
  };
  const formattedDate = new Intl.DateTimeFormat("en-US", dateFormatOptions).format(date);
  const day = date.getDate();
  const daySuffix = getDaySuffix(day);
  const parts = formattedDate.split(" ");
  return `${parts[0]} ${day}${daySuffix}, ${parts[2]}`;
}
function getDaySuffix(day) {
  if (day > 3 && day < 21)
    return "th";
  switch (day % 10) {
    case 1:
      return "st";
    case 2:
      return "nd";
    case 3:
      return "rd";
    default:
      return "th";
  }
}
function isDateFormat(text) {
  return /^\d{4}-\d{2}-\d{2}$/.test(text);
}

// src/utils/file-utils.ts
var import_obsidian2 = require("obsidian");
async function ensureFolder(app, folderPath) {
  if (!folderPath) {
    return true;
  }
  const folderExists = app.vault.getAbstractFileByPath(folderPath);
  if (folderExists && !(folderExists instanceof import_obsidian2.TFolder)) {
    new import_obsidian2.Notice(`Cannot create journal folder: "${folderPath}" exists but is not a folder`);
    return false;
  }
  if (!folderExists) {
    try {
      await app.vault.createFolder(folderPath);
      new import_obsidian2.Notice(`Created journal folder: ${folderPath}`);
      return true;
    } catch (error) {
      new import_obsidian2.Notice(`Failed to create journal folder: ${error}`);
      console.error("Failed to create journal folder:", error);
      return false;
    }
  }
  return true;
}
function getFilePath(folder, filename) {
  if (folder) {
    return `${folder}/${filename}`;
  }
  return filename;
}
function isJournalFile(file, journalFolder) {
  const isDateBasename = isDateFormat(file.basename);
  if (journalFolder) {
    return isDateBasename && file.path.startsWith(journalFolder + "/");
  }
  return isDateBasename;
}
function getJournalFiles(app, journalFolder) {
  const files = app.vault.getMarkdownFiles();
  return files.filter((file) => isJournalFile(file, journalFolder));
}
function sortJournalFiles(files, sortDirection) {
  return files.sort((a, b) => {
    if (sortDirection === "newest-first") {
      return b.basename.localeCompare(a.basename);
    } else {
      return a.basename.localeCompare(b.basename);
    }
  });
}
async function getOrCreateJournalFile(app, journalFolder, filename, initialContent = "") {
  await ensureFolder(app, journalFolder);
  const filePath = getFilePath(journalFolder, filename);
  let file = app.vault.getAbstractFileByPath(filePath);
  if (file instanceof import_obsidian2.TFile) {
    return file;
  }
  try {
    file = await app.vault.create(filePath, initialContent);
    new import_obsidian2.Notice(`Created journal entry: ${filename}`);
    return file;
  } catch (error) {
    new import_obsidian2.Notice(`Failed to create journal entry: ${error}`);
    console.error("Failed to create journal entry:", error);
    return null;
  }
}

// src/journal-view.ts
var clickType = null;
var needsRendering = false;
var isContextMenuOpen = false;
var JournalView = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Opens the continuous journal view in a new leaf
   */
  async open() {
    const leaf = this.plugin.app.workspace.getLeaf(true);
    await leaf.setViewState({
      type: "markdown",
      active: true
    });
    const contentEl = leaf.view.containerEl;
    contentEl.empty();
    const panel = contentEl.createDiv({ cls: "custom-journal-panel" });
    const journalFiles = getJournalFiles(this.plugin.app, this.plugin.settings.journalFolder);
    if (journalFiles.length === 0) {
      new import_obsidian3.Notice("No journal entries found.");
      panel.createEl("div", {
        cls: "journal-empty-state",
        text: "No journal entries found. Create one by clicking the journals icon in the ribbon."
      });
      return;
    }
    const sortedFiles = sortJournalFiles(journalFiles, this.plugin.settings.sortDirection);
    for (const file of sortedFiles) {
      try {
        const fileContent = await this.plugin.app.vault.read(file);
        this.addJournalEntry(panel, file, fileContent);
      } catch (error) {
        console.error(`Error reading file ${file.path}:`, error);
        this.addErrorMessage(panel, file.basename, error);
      }
    }
  }
  /**
   * Adds an error message to the panel when file reading fails
   */
  addErrorMessage(panel, filename, error) {
    const errorDiv = panel.createDiv({ cls: "journal-entry journal-error" });
    const errorHeader = errorDiv.createDiv({ cls: "journal-entry-header" });
    errorHeader.createEl("h3", {
      cls: "journal-entry-title",
      text: `${filename} - Error`
    });
    const errorContent = errorDiv.createDiv({ cls: "journal-error-content" });
    errorContent.textContent = `Failed to load journal: ${error.message || error}`;
  }
  /**
   * Adds a journal entry to the panel
   */
  addJournalEntry(panel, file, content) {
    const journalDate = file.basename;
    const journalEntry = panel.createDiv({ cls: "journal-entry" });
    const header = journalEntry.createDiv({ cls: "journal-entry-header" });
    const toggleButton = header.createEl("button", { cls: "collapsible-toggle" });
    if (this.plugin.settings.defaultExpandEntries) {
      toggleButton.addClass("toggle-expanded");
    }
    const title = header.createEl("h3", { cls: "journal-entry-title" });
    const titleLink = title.createEl("a", {
      cls: "journal-entry-link",
      text: formatDateForDisplay(journalDate)
    });
    titleLink.addEventListener("click", (event) => {
      event.preventDefault();
      this.plugin.app.workspace.openLinkText(file.basename, file.path);
    });
    const contentArea = journalEntry.createDiv({
      cls: "collapsible-content" + (this.plugin.settings.defaultExpandEntries ? " content-expanded" : "")
    });
    let currentContent = content;
    let isEditing = false;
    const renderedContent = contentArea.createDiv({
      cls: "rendered-content active-view"
    });
    const editableContent = contentArea.createEl("textarea", {
      cls: "editable-content",
      value: currentContent
    });
    const saveIndicator = contentArea.createDiv({
      cls: "journal-save-indicator",
      text: "Saving..."
    });
    window.requestAnimationFrame(() => {
      editableContent.style.height = editableContent.scrollHeight + "px";
    });
    const renderContent = () => {
      renderedContent.empty();
      import_obsidian3.MarkdownRenderer.render(this.plugin.app, currentContent, renderedContent, file.path, this.plugin);
    };
    renderContent();
    const enterEditMode = () => {
      isEditing = true;
      editableContent.value = currentContent;
      renderedContent.classList.remove("active-view");
      editableContent.classList.add("active-view");
      editableContent.style.height = "auto";
      editableContent.style.height = editableContent.scrollHeight + "px";
      editableContent.focus();
    };
    const exitEditMode = async () => {
      isEditing = false;
      currentContent = editableContent.value;
      await this.saveContentToFile(file, currentContent);
      renderContent();
      editableContent.classList.remove("active-view");
      renderedContent.classList.add("active-view");
    };
    renderedContent.addEventListener("click", (event) => {
      const target = event.target;
      const isRightClick = event.button === 2;
      if (target.tagName === "A" || target.closest("a") || target.classList.contains("cm-hashtag") || target.closest(".cm-hashtag")) {
        return;
      }
      if (!isRightClick) {
        enterEditMode();
      }
    });
    editableContent.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        exitEditMode();
      }
    });
    editableContent.addEventListener("input", () => {
      editableContent.style.height = "auto";
      editableContent.style.height = editableContent.scrollHeight + "px";
      currentContent = editableContent.value;
    });
    editableContent.addEventListener("mousedown", (event) => {
      switch (event.button) {
        case 0:
          clickType = "left";
          break;
        case 2:
          clickType = "right";
          break;
      }
    });
    editableContent.addEventListener("click", (event) => {
      if (event.target !== editableContent) {
        needsRendering = true;
      }
    });
    editableContent.addEventListener("contextmenu", (event) => {
      event.preventDefault();
    });
    editableContent.addEventListener("blur", (event) => {
      setTimeout(() => {
        if (needsRendering || clickType === "left" && !event.relatedTarget) {
          renderContent();
          needsRendering = false;
        }
        if (clickType === "left" && !event.relatedTarget) {
          exitEditMode();
        }
        clickType = null;
      }, 100);
    });
    editableContent.addEventListener("mouseleave", () => {
      console.log("Mouse left textarea");
      isContextMenuOpen = false;
    });
    let saveTimeout = null;
    editableContent.addEventListener("input", () => {
      saveIndicator.classList.remove("saved");
      saveIndicator.classList.add("saving");
      saveIndicator.textContent = "Saving...";
      if (saveTimeout) {
        clearTimeout(saveTimeout);
      }
      saveTimeout = setTimeout(async () => {
        await this.saveContentToFile(file, currentContent);
        saveIndicator.classList.remove("saving");
        saveIndicator.classList.add("saved");
        saveIndicator.textContent = "Saved";
      }, 500);
    });
    toggleButton.addEventListener("click", () => {
      toggleButton.classList.toggle("toggle-expanded");
      contentArea.classList.toggle("content-expanded");
    });
  }
  // Inserts text at the cursor position in a textarea
  insertTextAtCursor(textarea, text) {
    const cursorPos = textarea.selectionStart;
    const textBefore = textarea.value.substring(0, cursorPos);
    const textAfter = textarea.value.substring(textarea.selectionEnd);
    const newText = textBefore + "\n\n" + text + "\n\n" + textAfter;
    textarea.value = newText;
    const newCursorPos = cursorPos + text.length + 4;
    textarea.setSelectionRange(newCursorPos, newCursorPos);
  }
  /**
   * Saves the content to the file
   */
  async saveContentToFile(file, content) {
    try {
      await this.plugin.app.vault.modify(file, content);
    } catch (error) {
      new import_obsidian3.Notice(`Failed to save changes: ${error}`);
      console.error("Failed to save changes:", error);
    }
  }
  // Inserts a reference to a file into the current journal entry
  insertFileReference(filePath) {
    needsRendering = true;
    const activeEditableContents = document.querySelectorAll(".editable-content.active-view");
    if (activeEditableContents.length === 0) {
      new import_obsidian3.Notice("No active journal entry to insert file into");
      return;
    }
    const activeEditableContent = activeEditableContents[0];
    const file = this.plugin.app.vault.getAbstractFileByPath(filePath);
    if (!(file instanceof import_obsidian3.TFile)) {
      new import_obsidian3.Notice("Invalid file");
      return;
    }
    let fileReference;
    if (this.isImageFile(file)) {
      fileReference = `![[${file.name}]]`;
    } else if (this.isMarkdownFile(file)) {
      fileReference = `![[${file.name}]]`;
    } else {
      fileReference = `![[${file.name}]]`;
    }
    activeEditableContent.focus();
    const cursorPos = activeEditableContent.selectionStart;
    const textBefore = activeEditableContent.value.substring(0, cursorPos);
    const textAfter = activeEditableContent.value.substring(activeEditableContent.selectionEnd);
    const newText = textBefore + "\n\n" + fileReference + "\n\n" + textAfter;
    activeEditableContent.value = newText;
    const newCursorPos = cursorPos + fileReference.length + 4;
    activeEditableContent.setSelectionRange(newCursorPos, newCursorPos);
    const inputEvent = new Event("input", { bubbles: true, cancelable: true });
    activeEditableContent.dispatchEvent(inputEvent);
    const changeEvent = new Event("change", { bubbles: true, cancelable: true });
    activeEditableContent.dispatchEvent(changeEvent);
    new import_obsidian3.Notice(`Inserted reference to ${file.name}`);
  }
  /**
   * Check if a file is an image
   */
  isImageFile(file) {
    const imageExtensions = ["png", "jpg", "jpeg", "gif", "svg", "webp"];
    const ext = file.extension.toLowerCase();
    return imageExtensions.includes(ext);
  }
  /**
   * Check if a file is a markdown file
   */
  isMarkdownFile(file) {
    const ext = file.extension.toLowerCase();
    return ext === "md" || ext === "markdown";
  }
};

// src/main.ts
var JournalingPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.journalView = new JournalView(this);
    const ribbonIconEl = this.addRibbonIcon(
      "notebook-text",
      "Open Journals",
      async (evt) => {
        await this.openJournalView();
      }
    );
    ribbonIconEl.addClass("journaling-ribbon-icon");
    this.addCommand({
      id: "open-journal-view",
      name: "Open Journal View",
      callback: () => {
        this.openJournalView();
      }
    });
    this.addCommand({
      id: "create-todays-journal",
      name: "Create/Open Today's Journal",
      callback: () => {
        this.createTodaysJournal();
      }
    });
    this.addSettingTab(new JournalingSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian4.TFile) {
          menu.addItem((item) => {
            item.setTitle("Insert into Journal").setIcon("text-cursor-input").onClick(() => {
              const journalView = this.journalView;
              if (journalView) {
                journalView.insertFileReference(file.path);
              } else {
                new import_obsidian4.Notice("Open the journal view first to insert file reference");
              }
            });
          });
        }
      })
    );
  }
  /**
   * Opens the continuous journal view
   */
  async openJournalView() {
    await this.createTodaysJournal();
    await this.journalView.open();
  }
  /**
   * Creates or opens today's journal entry
   */
  async createTodaysJournal() {
    const date = getTodayDate();
    const fileName = `${date}.md`;
    const file = await getOrCreateJournalFile(
      this.app,
      this.settings.journalFolder,
      fileName
    );
    if (!file) {
      new import_obsidian4.Notice("Failed to create or open today's journal");
      return;
    }
  }
  getActiveEditor() {
    const activeEditors = document.querySelectorAll(".journal-entry textarea.editable-content.active-view");
    if (activeEditors.length > 0) {
      return activeEditors[0];
    }
    return null;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy9qb3VybmFsLXZpZXcudHMiLCAic3JjL3V0aWxzL2RhdGUtdXRpbHMudHMiLCAic3JjL3V0aWxzL2ZpbGUtdXRpbHMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwcCwgUGx1Z2luLCBOb3RpY2UsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgREVGQVVMVF9TRVRUSU5HUywgSm91cm5hbGluZ1NldHRpbmdzLCBKb3VybmFsaW5nU2V0dGluZ1RhYiB9IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgSm91cm5hbFZpZXcgfSBmcm9tICcuL2pvdXJuYWwtdmlldyc7XG5pbXBvcnQgeyBnZXRUb2RheURhdGUgfSBmcm9tICcuL3V0aWxzL2RhdGUtdXRpbHMnO1xuaW1wb3J0IHsgZ2V0T3JDcmVhdGVKb3VybmFsRmlsZSB9IGZyb20gJy4vdXRpbHMvZmlsZS11dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEpvdXJuYWxpbmdQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICAgIHNldHRpbmdzOiBKb3VybmFsaW5nU2V0dGluZ3M7XG4gICAgam91cm5hbFZpZXc6IEpvdXJuYWxWaWV3O1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICAvLyBMb2FkIHNldHRpbmdzXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBJbml0aWFsaXplIGpvdXJuYWwgdmlld1xuICAgICAgICB0aGlzLmpvdXJuYWxWaWV3ID0gbmV3IEpvdXJuYWxWaWV3KHRoaXMpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIHJpYmJvbiBpY29uXG4gICAgICAgIGNvbnN0IHJpYmJvbkljb25FbCA9IHRoaXMuYWRkUmliYm9uSWNvbihcbiAgICAgICAgICAgICdub3RlYm9vay10ZXh0JywgXG4gICAgICAgICAgICAnT3BlbiBKb3VybmFscycsIFxuICAgICAgICAgICAgYXN5bmMgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub3BlbkpvdXJuYWxWaWV3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJpYmJvbkljb25FbC5hZGRDbGFzcygnam91cm5hbGluZy1yaWJib24taWNvbicpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIGNvbW1hbmRcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnb3Blbi1qb3VybmFsLXZpZXcnLFxuICAgICAgICAgICAgbmFtZTogJ09wZW4gSm91cm5hbCBWaWV3JyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuSm91cm5hbFZpZXcoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIGFub3RoZXIgY29tbWFuZCBzcGVjaWZpY2FsbHkgZm9yIGNyZWF0aW5nIHRvZGF5J3Mgam91cm5hbFxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdjcmVhdGUtdG9kYXlzLWpvdXJuYWwnLFxuICAgICAgICAgICAgbmFtZTogJ0NyZWF0ZS9PcGVuIFRvZGF5XFwncyBKb3VybmFsJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVUb2RheXNKb3VybmFsKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlZ2lzdGVyIHNldHRpbmdzIHRhYlxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IEpvdXJuYWxpbmdTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKCdmaWxlLW1lbnUnLCAobWVudSwgZmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBmaWxlIGlzIGEgVEZpbGUgKGFjdHVhbCBmaWxlKVxuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKCdJbnNlcnQgaW50byBKb3VybmFsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbigndGV4dC1jdXJzb3ItaW5wdXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgYWN0aXZlIGpvdXJuYWwgdmlldyBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgam91cm5hbFZpZXcgPSB0aGlzLmpvdXJuYWxWaWV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoam91cm5hbFZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluc2VydCB0aGUgZmlsZSByZWZlcmVuY2UgaW50byB0aGUgYWN0aXZlIGVkaXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam91cm5hbFZpZXcuaW5zZXJ0RmlsZVJlZmVyZW5jZShmaWxlLnBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnT3BlbiB0aGUgam91cm5hbCB2aWV3IGZpcnN0IHRvIGluc2VydCBmaWxlIHJlZmVyZW5jZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIGNvbnRpbnVvdXMgam91cm5hbCB2aWV3XG4gICAgICovXG4gICAgYXN5bmMgb3BlbkpvdXJuYWxWaWV3KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBGaXJzdCwgZW5zdXJlIHRvZGF5J3Mgam91cm5hbCBleGlzdHNcbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVUb2RheXNKb3VybmFsKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBUaGVuIG9wZW4gdGhlIGNvbnRpbnVvdXMgdmlld1xuICAgICAgICBhd2FpdCB0aGlzLmpvdXJuYWxWaWV3Lm9wZW4oKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBvciBvcGVucyB0b2RheSdzIGpvdXJuYWwgZW50cnlcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVUb2RheXNKb3VybmFsKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBkYXRlID0gZ2V0VG9kYXlEYXRlKCk7XG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gYCR7ZGF0ZX0ubWRgO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZmlsZSA9IGF3YWl0IGdldE9yQ3JlYXRlSm91cm5hbEZpbGUoXG4gICAgICAgICAgICB0aGlzLmFwcCwgXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmpvdXJuYWxGb2xkZXIsIFxuICAgICAgICAgICAgZmlsZU5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnRmFpbGVkIHRvIGNyZWF0ZSBvciBvcGVuIHRvZGF5XFwncyBqb3VybmFsJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRBY3RpdmVFZGl0b3IoKTogSFRNTFRleHRBcmVhRWxlbWVudCB8IG51bGwge1xuICAgICAgICAvLyBMb29rIGZvciB0ZXh0YXJlYXMgd2l0aCB0aGUgYWN0aXZlLXZpZXcgY2xhc3Mgd2l0aGluIHRoZSBqb3VybmFsIHZpZXdcbiAgICAgICAgY29uc3QgYWN0aXZlRWRpdG9ycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb3VybmFsLWVudHJ5IHRleHRhcmVhLmVkaXRhYmxlLWNvbnRlbnQuYWN0aXZlLXZpZXcnKTtcbiAgICAgICAgaWYgKGFjdGl2ZUVkaXRvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUVkaXRvcnNbMF0gYXMgSFRNTFRleHRBcmVhRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgSm91cm5hbGluZ1BsdWdpbiBmcm9tICcuL21haW4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEpvdXJuYWxpbmdTZXR0aW5ncyB7XG4gICAgam91cm5hbEZvbGRlcjogc3RyaW5nO1xuICAgIGRhdGVGb3JtYXQ6IHN0cmluZztcbiAgICBzb3J0RGlyZWN0aW9uOiAnbmV3ZXN0LWZpcnN0JyB8ICdvbGRlc3QtZmlyc3QnO1xuICAgIGRlZmF1bHRFeHBhbmRFbnRyaWVzOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogSm91cm5hbGluZ1NldHRpbmdzID0ge1xuICAgIGpvdXJuYWxGb2xkZXI6ICdqb3VybmFscycsXG4gICAgZGF0ZUZvcm1hdDogJ1lZWVktTU0tREQnLFxuICAgIHNvcnREaXJlY3Rpb246ICduZXdlc3QtZmlyc3QnLFxuICAgIGRlZmF1bHRFeHBhbmRFbnRyaWVzOiB0cnVlLFxufTtcblxuZXhwb3J0IGNsYXNzIEpvdXJuYWxpbmdTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBKb3VybmFsaW5nUGx1Z2luO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogSm91cm5hbGluZ1BsdWdpbikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnQ29udGludW91cyBKb3VybmFsaW5nIFNldHRpbmdzJyB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdKb3VybmFsIEZvbGRlcicpXG4gICAgICAgICAgICAuc2V0RGVzYygnU3BlY2lmeSB0aGUgZm9sZGVyIHdoZXJlIGpvdXJuYWwgZW50cmllcyB3aWxsIGJlIHN0b3JlZCcpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ2pvdXJuYWxzJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muam91cm5hbEZvbGRlcilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIGZvciBjb25zaXN0ZW5jeVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5qb3VybmFsRm9sZGVyID0gdmFsdWUucmVwbGFjZSgvXlxcLyt8XFwvKyQvZywgJycpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRGF0ZSBGb3JtYXQnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0Zvcm1hdCBmb3Igam91cm5hbCBmaWxlbmFtZXMgKFlZWVktTU0tREQgcmVjb21tZW5kZWQpJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignWVlZWS1NTS1ERCcpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRhdGVGb3JtYXQpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kYXRlRm9ybWF0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTb3J0IERpcmVjdGlvbicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSG93IHRvIHNvcnQgam91cm5hbCBlbnRyaWVzIGluIHRoZSBjb250aW51b3VzIHZpZXcnKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbignbmV3ZXN0LWZpcnN0JywgJ05ld2VzdCBlbnRyaWVzIGZpcnN0JylcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdvbGRlc3QtZmlyc3QnLCAnT2xkZXN0IGVudHJpZXMgZmlyc3QnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0RGlyZWN0aW9uKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6ICduZXdlc3QtZmlyc3QnIHwgJ29sZGVzdC1maXJzdCcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydERpcmVjdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRGVmYXVsdCBFeHBhbmQgRW50cmllcycpXG4gICAgICAgICAgICAuc2V0RGVzYygnQXV0b21hdGljYWxseSBleHBhbmQgZW50cmllcyB3aGVuIG9wZW5pbmcgdGhlIGpvdXJuYWxzIHZpZXcnKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRFeHBhbmRFbnRyaWVzKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdEV4cGFuZEVudHJpZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgIH1cbn0iLCAiaW1wb3J0IHsgTWFya2Rvd25SZW5kZXJlciwgTm90aWNlLCBURmlsZSwgV29ya3NwYWNlTGVhZiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBKb3VybmFsaW5nUGx1Z2luIGZyb20gJy4vbWFpbic7XG5pbXBvcnQgeyBmb3JtYXREYXRlRm9yRGlzcGxheSB9IGZyb20gJy4vdXRpbHMvZGF0ZS11dGlscyc7XG5pbXBvcnQgeyBnZXRKb3VybmFsRmlsZXMsIHNvcnRKb3VybmFsRmlsZXMgfSBmcm9tICcuL3V0aWxzL2ZpbGUtdXRpbHMnO1xuXG5sZXQgY2xpY2tUeXBlOiAnbGVmdCcgfCAncmlnaHQnIHwgbnVsbCA9IG51bGw7XG5sZXQgbmVlZHNSZW5kZXJpbmcgPSBmYWxzZTtcbmxldCBpc0NvbnRleHRNZW51T3BlbiA9IGZhbHNlO1xuXG5leHBvcnQgY2xhc3MgSm91cm5hbFZpZXcge1xuICAgIHBsdWdpbjogSm91cm5hbGluZ1BsdWdpbjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IEpvdXJuYWxpbmdQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBjb250aW51b3VzIGpvdXJuYWwgdmlldyBpbiBhIG5ldyBsZWFmXG4gICAgICovXG4gICAgYXN5bmMgb3BlbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGxlYWYgKG9wZW5zIGEgbmV3IHRhYilcbiAgICAgICAgY29uc3QgbGVhZiA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNldCB0aGUgdmlldyBzdGF0ZSB0byBNYXJrZG93biB0byBhY2Nlc3MgY29udGFpbmVyRWxcbiAgICAgICAgYXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xuICAgICAgICAgICAgdHlwZTogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgbWFpbiBjb250YWluZXJcbiAgICAgICAgY29uc3QgY29udGVudEVsID0gbGVhZi52aWV3LmNvbnRhaW5lckVsO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSBhIHNjcm9sbGFibGUgcGFuZWwgZm9yIGpvdXJuYWwgZW50cmllc1xuICAgICAgICBjb25zdCBwYW5lbCA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6ICdjdXN0b20tam91cm5hbC1wYW5lbCcgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBHZXQgYWxsIGpvdXJuYWwgZmlsZXNcbiAgICAgICAgY29uc3Qgam91cm5hbEZpbGVzID0gZ2V0Sm91cm5hbEZpbGVzKHRoaXMucGx1Z2luLmFwcCwgdGhpcy5wbHVnaW4uc2V0dGluZ3Muam91cm5hbEZvbGRlcik7XG4gICAgICAgIFxuICAgICAgICBpZiAoam91cm5hbEZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gam91cm5hbCBlbnRyaWVzIGZvdW5kLicpO1xuICAgICAgICAgICAgcGFuZWwuY3JlYXRlRWwoJ2RpdicsIHsgXG4gICAgICAgICAgICAgICAgY2xzOiAnam91cm5hbC1lbXB0eS1zdGF0ZScsXG4gICAgICAgICAgICAgICAgdGV4dDogJ05vIGpvdXJuYWwgZW50cmllcyBmb3VuZC4gQ3JlYXRlIG9uZSBieSBjbGlja2luZyB0aGUgam91cm5hbHMgaWNvbiBpbiB0aGUgcmliYm9uLicgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gU29ydCB0aGUgZmlsZXMgYWNjb3JkaW5nIHRvIHVzZXIgcHJlZmVyZW5jZVxuICAgICAgICBjb25zdCBzb3J0ZWRGaWxlcyA9IHNvcnRKb3VybmFsRmlsZXMoam91cm5hbEZpbGVzLCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0RGlyZWN0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCBlYWNoIGZpbGUgdG8gdGhlIHBhbmVsXG4gICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBzb3J0ZWRGaWxlcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkSm91cm5hbEVudHJ5KHBhbmVsLCBmaWxlLCBmaWxlQ29udGVudCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHJlYWRpbmcgZmlsZSAke2ZpbGUucGF0aH06YCwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyb3JNZXNzYWdlKHBhbmVsLCBmaWxlLmJhc2VuYW1lLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBlcnJvciBtZXNzYWdlIHRvIHRoZSBwYW5lbCB3aGVuIGZpbGUgcmVhZGluZyBmYWlsc1xuICAgICAqL1xuICAgIHByaXZhdGUgYWRkRXJyb3JNZXNzYWdlKHBhbmVsOiBIVE1MRWxlbWVudCwgZmlsZW5hbWU6IHN0cmluZywgZXJyb3I6IGFueSk6IHZvaWQge1xuICAgICAgICBjb25zdCBlcnJvckRpdiA9IHBhbmVsLmNyZWF0ZURpdih7IGNsczogJ2pvdXJuYWwtZW50cnkgam91cm5hbC1lcnJvcicgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBlcnJvckhlYWRlciA9IGVycm9yRGl2LmNyZWF0ZURpdih7IGNsczogJ2pvdXJuYWwtZW50cnktaGVhZGVyJyB9KTtcbiAgICAgICAgZXJyb3JIZWFkZXIuY3JlYXRlRWwoJ2gzJywgeyBcbiAgICAgICAgICAgIGNsczogJ2pvdXJuYWwtZW50cnktdGl0bGUnLFxuICAgICAgICAgICAgdGV4dDogYCR7ZmlsZW5hbWV9IC0gRXJyb3JgIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGVycm9yQ29udGVudCA9IGVycm9yRGl2LmNyZWF0ZURpdih7IGNsczogJ2pvdXJuYWwtZXJyb3ItY29udGVudCcgfSk7XG4gICAgICAgIGVycm9yQ29udGVudC50ZXh0Q29udGVudCA9IGBGYWlsZWQgdG8gbG9hZCBqb3VybmFsOiAke2Vycm9yLm1lc3NhZ2UgfHwgZXJyb3J9YDtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGpvdXJuYWwgZW50cnkgdG8gdGhlIHBhbmVsXG4gICAgICovXG4gICAgcHJpdmF0ZSBhZGRKb3VybmFsRW50cnkocGFuZWw6IEhUTUxFbGVtZW50LCBmaWxlOiBURmlsZSwgY29udGVudDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGpvdXJuYWxEYXRlID0gZmlsZS5iYXNlbmFtZTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgbWFpbiBjb250YWluZXIgZm9yIHRoaXMgZW50cnlcbiAgICAgICAgY29uc3Qgam91cm5hbEVudHJ5ID0gcGFuZWwuY3JlYXRlRGl2KHsgY2xzOiAnam91cm5hbC1lbnRyeScgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgdGhlIGhlYWRlciBzZWN0aW9uXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGpvdXJuYWxFbnRyeS5jcmVhdGVEaXYoeyBjbHM6ICdqb3VybmFsLWVudHJ5LWhlYWRlcicgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgdG9nZ2xlIGJ1dHRvbiBmb3IgY29sbGFwc2luZy9leHBhbmRpbmdcbiAgICAgICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gaGVhZGVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IGNsczogJ2NvbGxhcHNpYmxlLXRvZ2dsZScgfSk7XG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0RXhwYW5kRW50cmllcykge1xuICAgICAgICAgICAgdG9nZ2xlQnV0dG9uLmFkZENsYXNzKCd0b2dnbGUtZXhwYW5kZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQWRkIHRpdGxlIHdpdGggbGluayB0byB0aGUgb3JpZ2luYWwgZmlsZVxuICAgICAgICBjb25zdCB0aXRsZSA9IGhlYWRlci5jcmVhdGVFbCgnaDMnLCB7IGNsczogJ2pvdXJuYWwtZW50cnktdGl0bGUnIH0pO1xuICAgICAgICBjb25zdCB0aXRsZUxpbmsgPSB0aXRsZS5jcmVhdGVFbCgnYScsIHsgXG4gICAgICAgICAgICBjbHM6ICdqb3VybmFsLWVudHJ5LWxpbmsnLFxuICAgICAgICAgICAgdGV4dDogZm9ybWF0RGF0ZUZvckRpc3BsYXkoam91cm5hbERhdGUpXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gSGFuZGxlIGNsaWNrIG9uIHRoZSB0aXRsZSB0byBvcGVuIHRoZSBmaWxlXG4gICAgICAgIHRpdGxlTGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KGZpbGUuYmFzZW5hbWUsIGZpbGUucGF0aCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBjb250ZW50IGFyZWFcbiAgICAgICAgY29uc3QgY29udGVudEFyZWEgPSBqb3VybmFsRW50cnkuY3JlYXRlRGl2KHsgXG4gICAgICAgICAgICBjbHM6ICdjb2xsYXBzaWJsZS1jb250ZW50JyArICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0RXhwYW5kRW50cmllcyA/ICcgY29udGVudC1leHBhbmRlZCcgOiAnJylcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUcmFjayB0aGUgY3VycmVudCBjb250ZW50XG4gICAgICAgIGxldCBjdXJyZW50Q29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIFxuICAgICAgICAvLyBGbGFnIHRvIHRyYWNrIGlmIHRoZSBlbnRyeSBpcyBpbiBlZGl0IG1vZGVcbiAgICAgICAgbGV0IGlzRWRpdGluZyA9IGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSByZW5kZXJlZCBjb250ZW50IHZpZXdcbiAgICAgICAgY29uc3QgcmVuZGVyZWRDb250ZW50ID0gY29udGVudEFyZWEuY3JlYXRlRGl2KHsgXG4gICAgICAgICAgICBjbHM6ICdyZW5kZXJlZC1jb250ZW50IGFjdGl2ZS12aWV3JyBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgdGhlIGVkaXRhYmxlIHRleHRhcmVhXG4gICAgICAgIGNvbnN0IGVkaXRhYmxlQ29udGVudCA9IGNvbnRlbnRBcmVhLmNyZWF0ZUVsKCd0ZXh0YXJlYScsIHsgXG4gICAgICAgICAgICBjbHM6ICdlZGl0YWJsZS1jb250ZW50JyxcbiAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50Q29udGVudFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSBzYXZlIGluZGljYXRvclxuICAgICAgICBjb25zdCBzYXZlSW5kaWNhdG9yID0gY29udGVudEFyZWEuY3JlYXRlRGl2KHsgXG4gICAgICAgICAgICBjbHM6ICdqb3VybmFsLXNhdmUtaW5kaWNhdG9yJyxcbiAgICAgICAgICAgIHRleHQ6ICdTYXZpbmcuLi4nXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRqdXN0IHRleHRhcmVhIGhlaWdodCB0byBjb250ZW50XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgZWRpdGFibGVDb250ZW50LnN0eWxlLmhlaWdodCA9IGVkaXRhYmxlQ29udGVudC5zY3JvbGxIZWlnaHQgKyAncHgnO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZ1bmN0aW9uIHRvIHJlbmRlciB0aGUgbWFya2Rvd24gY29udGVudFxuICAgICAgICBjb25zdCByZW5kZXJDb250ZW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVuZGVyZWRDb250ZW50LmVtcHR5KCk7XG4gICAgICAgICAgICBNYXJrZG93blJlbmRlcmVyLnJlbmRlcih0aGlzLnBsdWdpbi5hcHAsIGN1cnJlbnRDb250ZW50LCByZW5kZXJlZENvbnRlbnQsIGZpbGUucGF0aCwgdGhpcy5wbHVnaW4pO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gSW5pdGlhbCByZW5kZXJcbiAgICAgICAgcmVuZGVyQ29udGVudCgpO1xuICAgICAgICBcbiAgICAgICAgLy8gRnVuY3Rpb24gdG8gZW50ZXIgZWRpdCBtb2RlXG4gICAgICAgIGNvbnN0IGVudGVyRWRpdE1vZGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAvLyBTZXQgZWRpdGluZyBmbGFnXG4gICAgICAgICAgICBpc0VkaXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGV4dGFyZWEgaGFzIGN1cnJlbnQgY29udGVudFxuICAgICAgICAgICAgZWRpdGFibGVDb250ZW50LnZhbHVlID0gY3VycmVudENvbnRlbnQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEhpZGUgcmVuZGVyZWQgdmlldywgc2hvdyBlZGl0YWJsZSB2aWV3XG4gICAgICAgICAgICByZW5kZXJlZENvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlLXZpZXcnKTtcbiAgICAgICAgICAgIGVkaXRhYmxlQ29udGVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUtdmlldycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBZGp1c3QgdGV4dGFyZWEgaGVpZ2h0XG4gICAgICAgICAgICBlZGl0YWJsZUNvbnRlbnQuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICAgICAgZWRpdGFibGVDb250ZW50LnN0eWxlLmhlaWdodCA9IGVkaXRhYmxlQ29udGVudC5zY3JvbGxIZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgZWRpdGFibGVDb250ZW50LmZvY3VzKCk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBGdW5jdGlvbiB0byBleGl0IGVkaXQgbW9kZVxuICAgICAgICBjb25zdCBleGl0RWRpdE1vZGUgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBDbGVhciB0aGUgZWRpdGluZyBmbGFnXG4gICAgICAgICAgICBpc0VkaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gR2V0IGN1cnJlbnQgY29udGVudCBmcm9tIHRleHRhcmVhXG4gICAgICAgICAgICBjdXJyZW50Q29udGVudCA9IGVkaXRhYmxlQ29udGVudC52YWx1ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2F2ZSBjaGFuZ2VzXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVDb250ZW50VG9GaWxlKGZpbGUsIGN1cnJlbnRDb250ZW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmUtcmVuZGVyIGNvbnRlbnRcbiAgICAgICAgICAgIHJlbmRlckNvbnRlbnQoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSGlkZSBlZGl0YWJsZSB2aWV3LCBzaG93IHJlbmRlcmVkIHZpZXdcbiAgICAgICAgICAgIGVkaXRhYmxlQ29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUtdmlldycpO1xuICAgICAgICAgICAgcmVuZGVyZWRDb250ZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZS12aWV3Jyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVuZGVyZWRDb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIERldGVybWluZSBpZiB0aGlzIGlzIGEgcmlnaHQtY2xpY2tcbiAgICAgICAgICAgIGNvbnN0IGlzUmlnaHRDbGljayA9IGV2ZW50LmJ1dHRvbiA9PT0gMjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRG9uJ3QgZW50ZXIgZWRpdCBtb2RlIGlmIGNsaWNraW5nIG9uIGxpbmtzIG9yIGhhc2h0YWdzXG4gICAgICAgICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgPT09ICdBJyB8fCB0YXJnZXQuY2xvc2VzdCgnYScpIHx8IFxuICAgICAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NtLWhhc2h0YWcnKSB8fCB0YXJnZXQuY2xvc2VzdCgnLmNtLWhhc2h0YWcnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRW50ZXIgZWRpdCBtb2RlIGlmIG5vdCBhIHJpZ2h0LWNsaWNrXG4gICAgICAgICAgICBpZiAoIWlzUmlnaHRDbGljaykge1xuICAgICAgICAgICAgICAgIGVudGVyRWRpdE1vZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBNYW51YWwgc2F2ZS9leGl0IHdoZW4gcHJlc3NpbmcgRXNjYXBlXG4gICAgICAgIGVkaXRhYmxlQ29udGVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgICAgIGV4aXRFZGl0TW9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEF1dG8tYWRqdXN0IHRleHRhcmVhIGhlaWdodCB3aGlsZSB0eXBpbmdcbiAgICAgICAgZWRpdGFibGVDb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICAgICAgZWRpdGFibGVDb250ZW50LnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgICAgICAgIGVkaXRhYmxlQ29udGVudC5zdHlsZS5oZWlnaHQgPSBlZGl0YWJsZUNvbnRlbnQuc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgY29udGVudCB3aGlsZSB0eXBpbmdcbiAgICAgICAgICAgIGN1cnJlbnRDb250ZW50ID0gZWRpdGFibGVDb250ZW50LnZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUcmFjayBjbGljayB0eXBlIG9uIG1vdXNlZG93blxuICAgICAgICBlZGl0YWJsZUNvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmJ1dHRvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogLy8gTGVmdCBjbGlja1xuICAgICAgICAgICAgICAgICAgICBjbGlja1R5cGUgPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjogLy8gUmlnaHQgY2xpY2tcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tUeXBlID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFRyYWNrIGxlZnQtY2xpY2sgZm9yIHBvdGVudGlhbCByZW5kZXJpbmcgbmVlZFxuICAgICAgICBlZGl0YWJsZUNvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIElmIGNsaWNrZWQgb3V0c2lkZSBvZiB0ZXh0YXJlYSwgbWFyayBmb3IgcmVuZGVyaW5nXG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBlZGl0YWJsZUNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBuZWVkc1JlbmRlcmluZyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEhhbmRsZSBjb250ZXh0IG1lbnUgdG8gcHJldmVudCBkZWZhdWx0IHJpZ2h0LWNsaWNrIGJlaGF2aW9yXG4gICAgICAgIGVkaXRhYmxlQ29udGVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGFuZGxlIGJsdXIgZXZlbnRcbiAgICAgICAgZWRpdGFibGVDb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFJlbmRlciBpZjpcbiAgICAgICAgICAgICAgICAvLyAxLiBOZWVkcyByZW5kZXJpbmcgaXMgdHJ1ZSwgb3JcbiAgICAgICAgICAgICAgICAvLyAyLiBJdCB3YXMgYSBsZWZ0IGNsaWNrIG91dHNpZGUgdGhlIHRleHRhcmVhXG4gICAgICAgICAgICAgICAgaWYgKG5lZWRzUmVuZGVyaW5nIHx8IChjbGlja1R5cGUgPT09ICdsZWZ0JyAmJiAhZXZlbnQucmVsYXRlZFRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ29udGVudCgpO1xuICAgICAgICAgICAgICAgICAgICBuZWVkc1JlbmRlcmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEV4aXQgZWRpdCBtb2RlIGlmIGl0IHdhcyBhIGxlZnQgY2xpY2tcbiAgICAgICAgICAgICAgICBpZiAoY2xpY2tUeXBlID09PSAnbGVmdCcgJiYgIWV2ZW50LnJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpdEVkaXRNb2RlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgc3RhdGVzXG4gICAgICAgICAgICAgICAgY2xpY2tUeXBlID0gbnVsbDtcbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJlc2V0IHN0YXRlIHdoZW4gbGVhdmluZyB0aGUgdGV4dGFyZWFcbiAgICAgICAgZWRpdGFibGVDb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTW91c2UgbGVmdCB0ZXh0YXJlYScpO1xuICAgICAgICAgICAgLy8gUmVzZXQgc3RhdGVzIHRvIHByZXZlbnQgc3R1Y2sgc3RhdGVzXG4gICAgICAgICAgICBpc0NvbnRleHRNZW51T3BlbiA9IGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBdXRvLXNhdmUgY29udGVudCB3aGlsZSB0eXBpbmdcbiAgICAgICAgbGV0IHNhdmVUaW1lb3V0OiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsO1xuICAgICAgICBlZGl0YWJsZUNvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBTaG93ICdTYXZpbmcuLi4nIGluZGljYXRvclxuICAgICAgICAgICAgc2F2ZUluZGljYXRvci5jbGFzc0xpc3QucmVtb3ZlKCdzYXZlZCcpO1xuICAgICAgICAgICAgc2F2ZUluZGljYXRvci5jbGFzc0xpc3QuYWRkKCdzYXZpbmcnKTtcbiAgICAgICAgICAgIHNhdmVJbmRpY2F0b3IudGV4dENvbnRlbnQgPSAnU2F2aW5nLi4uJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2xlYXIgcHJldmlvdXMgdGltZW91dFxuICAgICAgICAgICAgaWYgKHNhdmVUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNhdmVUaW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2V0IGEgbmV3IHRpbWVvdXQgdG8gc2F2ZSBhZnRlciA1MDBtcyBvZiBpbmFjdGl2aXR5XG4gICAgICAgICAgICBzYXZlVGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2F2ZUNvbnRlbnRUb0ZpbGUoZmlsZSwgY3VycmVudENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBpbmRpY2F0b3IgdG8gJ1NhdmVkJ1xuICAgICAgICAgICAgICAgIHNhdmVJbmRpY2F0b3IuY2xhc3NMaXN0LnJlbW92ZSgnc2F2aW5nJyk7XG4gICAgICAgICAgICAgICAgc2F2ZUluZGljYXRvci5jbGFzc0xpc3QuYWRkKCdzYXZlZCcpO1xuICAgICAgICAgICAgICAgIHNhdmVJbmRpY2F0b3IudGV4dENvbnRlbnQgPSAnU2F2ZWQnO1xuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUb2dnbGUgZXhwYW5kL2NvbGxhcHNlIG9uIGJ1dHRvbiBjbGlja1xuICAgICAgICB0b2dnbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgndG9nZ2xlLWV4cGFuZGVkJyk7XG4gICAgICAgICAgICBjb250ZW50QXJlYS5jbGFzc0xpc3QudG9nZ2xlKCdjb250ZW50LWV4cGFuZGVkJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBJbnNlcnRzIHRleHQgYXQgdGhlIGN1cnNvciBwb3NpdGlvbiBpbiBhIHRleHRhcmVhXG4gICAgcHJpdmF0ZSBpbnNlcnRUZXh0QXRDdXJzb3IodGV4dGFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQsIHRleHQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBjdXJzb3JQb3MgPSB0ZXh0YXJlYS5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgY29uc3QgdGV4dEJlZm9yZSA9IHRleHRhcmVhLnZhbHVlLnN1YnN0cmluZygwLCBjdXJzb3JQb3MpO1xuICAgICAgICBjb25zdCB0ZXh0QWZ0ZXIgPSB0ZXh0YXJlYS52YWx1ZS5zdWJzdHJpbmcodGV4dGFyZWEuc2VsZWN0aW9uRW5kKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEluc2VydCB0ZXh0IGF0IGN1cnNvciBwb3NpdGlvbiB3aXRoIG5ld2xpbmVzIGZvciBmb3JtYXR0aW5nXG4gICAgICAgIGNvbnN0IG5ld1RleHQgPSB0ZXh0QmVmb3JlICsgJ1xcblxcbicgKyB0ZXh0ICsgJ1xcblxcbicgKyB0ZXh0QWZ0ZXI7XG4gICAgICAgIHRleHRhcmVhLnZhbHVlID0gbmV3VGV4dDtcbiAgICAgICAgXG4gICAgICAgIC8vIFNldCBjdXJzb3IgcG9zaXRpb24gYWZ0ZXIgdGhlIGluc2VydGVkIHRleHRcbiAgICAgICAgY29uc3QgbmV3Q3Vyc29yUG9zID0gY3Vyc29yUG9zICsgdGV4dC5sZW5ndGggKyA0OyAvLyArNCBmb3IgdGhlIG5ld2xpbmVzXG4gICAgICAgIHRleHRhcmVhLnNldFNlbGVjdGlvblJhbmdlKG5ld0N1cnNvclBvcywgbmV3Q3Vyc29yUG9zKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogU2F2ZXMgdGhlIGNvbnRlbnQgdG8gdGhlIGZpbGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIHNhdmVDb250ZW50VG9GaWxlKGZpbGU6IFRGaWxlLCBjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5tb2RpZnkoZmlsZSwgY29udGVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBGYWlsZWQgdG8gc2F2ZSBjaGFuZ2VzOiAke2Vycm9yfWApO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNhdmUgY2hhbmdlczonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbnNlcnRzIGEgcmVmZXJlbmNlIHRvIGEgZmlsZSBpbnRvIHRoZSBjdXJyZW50IGpvdXJuYWwgZW50cnlcbiAgICBpbnNlcnRGaWxlUmVmZXJlbmNlKGZpbGVQYXRoOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgbmVlZHNSZW5kZXJpbmcgPSB0cnVlO1xuICAgICAgICAvLyBGaW5kIGFsbCBqb3VybmFsIGVudHJpZXMgd2l0aCBhbiBhY3RpdmUgZWRpdGFibGUgY29udGVudFxuICAgICAgICBjb25zdCBhY3RpdmVFZGl0YWJsZUNvbnRlbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVkaXRhYmxlLWNvbnRlbnQuYWN0aXZlLXZpZXcnKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChhY3RpdmVFZGl0YWJsZUNvbnRlbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gYWN0aXZlIGpvdXJuYWwgZW50cnkgdG8gaW5zZXJ0IGZpbGUgaW50bycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIElmIG11bHRpcGxlIGFjdGl2ZSBjb250ZW50cywgZm9jdXMgb24gdGhlIGZpcnN0IG9uZVxuICAgICAgICBjb25zdCBhY3RpdmVFZGl0YWJsZUNvbnRlbnQgPSBhY3RpdmVFZGl0YWJsZUNvbnRlbnRzWzBdIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gICAgXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgZmlsZSByZWZlcmVuY2UgYmFzZWQgb24gdGhlIGZpbGUgdHlwZVxuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XG4gICAgICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0ludmFsaWQgZmlsZScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGxldCBmaWxlUmVmZXJlbmNlOiBzdHJpbmc7XG4gICAgICAgIFxuICAgICAgICAvLyBIYW5kbGUgZGlmZmVyZW50IGZpbGUgdHlwZXNcbiAgICAgICAgaWYgKHRoaXMuaXNJbWFnZUZpbGUoZmlsZSkpIHtcbiAgICAgICAgICAgIC8vIEZvciBpbWFnZXMsIHVzZSBtYXJrZG93biBpbWFnZSBzeW50YXhcbiAgICAgICAgICAgIGZpbGVSZWZlcmVuY2UgPSBgIVtbJHtmaWxlLm5hbWV9XV1gO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNNYXJrZG93bkZpbGUoZmlsZSkpIHtcbiAgICAgICAgICAgIC8vIEZvciBtYXJrZG93biBmaWxlcywgdXNlIHdpa2ktbGluayBzdHlsZVxuICAgICAgICAgICAgZmlsZVJlZmVyZW5jZSA9IGAhW1ske2ZpbGUubmFtZX1dXWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGb3Igb3RoZXIgZmlsZXMsIHVzZSBhIGdlbmVyaWMgbGlua1xuICAgICAgICAgICAgZmlsZVJlZmVyZW5jZSA9IGAhW1ske2ZpbGUubmFtZX1dXWA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gRW5zdXJlIHRoZSB0ZXh0YXJlYSBpcyBmb2N1c2VkXG4gICAgICAgIGFjdGl2ZUVkaXRhYmxlQ29udGVudC5mb2N1cygpO1xuICAgIFxuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IGN1cnNvclBvcyA9IGFjdGl2ZUVkaXRhYmxlQ29udGVudC5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgY29uc3QgdGV4dEJlZm9yZSA9IGFjdGl2ZUVkaXRhYmxlQ29udGVudC52YWx1ZS5zdWJzdHJpbmcoMCwgY3Vyc29yUG9zKTtcbiAgICAgICAgY29uc3QgdGV4dEFmdGVyID0gYWN0aXZlRWRpdGFibGVDb250ZW50LnZhbHVlLnN1YnN0cmluZyhhY3RpdmVFZGl0YWJsZUNvbnRlbnQuc2VsZWN0aW9uRW5kKTtcbiAgICBcbiAgICAgICAgLy8gSW5zZXJ0IHRleHQgd2l0aCBuZXdsaW5lc1xuICAgICAgICBjb25zdCBuZXdUZXh0ID0gdGV4dEJlZm9yZSArICdcXG5cXG4nICsgZmlsZVJlZmVyZW5jZSArICdcXG5cXG4nICsgdGV4dEFmdGVyO1xuICAgICAgICBhY3RpdmVFZGl0YWJsZUNvbnRlbnQudmFsdWUgPSBuZXdUZXh0O1xuICAgIFxuICAgICAgICAvLyBTZXQgY3Vyc29yIHBvc2l0aW9uIGFmdGVyIHRoZSBpbnNlcnRlZCB0ZXh0XG4gICAgICAgIGNvbnN0IG5ld0N1cnNvclBvcyA9IGN1cnNvclBvcyArIGZpbGVSZWZlcmVuY2UubGVuZ3RoICsgNDsgLy8gKzQgZm9yIHRoZSBuZXdsaW5lc1xuICAgICAgICBhY3RpdmVFZGl0YWJsZUNvbnRlbnQuc2V0U2VsZWN0aW9uUmFuZ2UobmV3Q3Vyc29yUG9zLCBuZXdDdXJzb3JQb3MpO1xuICAgIFxuICAgICAgICAvLyBUcmlnZ2VyIGlucHV0IGV2ZW50IHRvIGVuc3VyZSBjb250ZW50IGlzIHNhdmVkXG4gICAgICAgIGNvbnN0IGlucHV0RXZlbnQgPSBuZXcgRXZlbnQoJ2lucHV0JywgeyBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlIH0pO1xuICAgICAgICBhY3RpdmVFZGl0YWJsZUNvbnRlbnQuZGlzcGF0Y2hFdmVudChpbnB1dEV2ZW50KTtcbiAgICBcbiAgICAgICAgLy8gT3B0aW9uYWw6IHRyaWdnZXIgY2hhbmdlIGV2ZW50XG4gICAgICAgIGNvbnN0IGNoYW5nZUV2ZW50ID0gbmV3IEV2ZW50KCdjaGFuZ2UnLCB7IGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IHRydWUgfSk7XG4gICAgICAgIGFjdGl2ZUVkaXRhYmxlQ29udGVudC5kaXNwYXRjaEV2ZW50KGNoYW5nZUV2ZW50KTtcbiAgICBcbiAgICAgICAgLy8gU2hvdyBhIHN1Y2Nlc3Mgbm90aWNlXG4gICAgICAgIG5ldyBOb3RpY2UoYEluc2VydGVkIHJlZmVyZW5jZSB0byAke2ZpbGUubmFtZX1gKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSBmaWxlIGlzIGFuIGltYWdlXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0ltYWdlRmlsZShmaWxlOiBURmlsZSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBpbWFnZUV4dGVuc2lvbnMgPSBbJ3BuZycsICdqcGcnLCAnanBlZycsICdnaWYnLCAnc3ZnJywgJ3dlYnAnXTtcbiAgICAgICAgY29uc3QgZXh0ID0gZmlsZS5leHRlbnNpb24udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGltYWdlRXh0ZW5zaW9ucy5pbmNsdWRlcyhleHQpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIGZpbGUgaXMgYSBtYXJrZG93biBmaWxlXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc01hcmtkb3duRmlsZShmaWxlOiBURmlsZSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBleHQgPSBmaWxlLmV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gZXh0ID09PSAnbWQnIHx8IGV4dCA9PT0gJ21hcmtkb3duJztcbiAgICB9XG59IiwgIi8qKlxuICogRm9ybWF0cyB0aGUgY3VycmVudCBkYXRlIGluIFlZWVktTU0tREQgZm9ybWF0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2RheURhdGUoKTogc3RyaW5nIHtcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIGZvcm1hdERhdGVTdHJpbmcodG9kYXkpO1xufVxuXG4vKipcbiAqIEZvcm1hdHMgYSBkYXRlIGFzIFlZWVktTU0tRERcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGVTdHJpbmcoZGF0ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICBjb25zdCBtb250aCA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIGNvbnN0IGRheSA9IFN0cmluZyhkYXRlLmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICByZXR1cm4gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9YDtcbn1cblxuLyoqXG4gKiBGb3JtYXRzIGEgZGF0ZSBzdHJpbmcgaW4gYSBodW1hbi1yZWFkYWJsZSBmb3JtYXQgd2l0aCBvcmRpbmFsIHN1ZmZpeFxuICogQHBhcmFtIGRhdGVTdHJpbmcgU3RyaW5nIGluIFlZWVktTU0tREQgZm9ybWF0XG4gKiBAcmV0dXJucyBGb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgKGUuZy4sIFwiRmViIDE1dGgsIDIwMjNcIilcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGVGb3JEaXNwbGF5KGRhdGVTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHJpbmcpO1xuICAgIGNvbnN0IGRhdGVGb3JtYXRPcHRpb25zOiBJbnRsLkRhdGVUaW1lRm9ybWF0T3B0aW9ucyA9IHsgXG4gICAgICAgIG1vbnRoOiAnc2hvcnQnLCBcbiAgICAgICAgeWVhcjogJ251bWVyaWMnLCBcbiAgICAgICAgZGF5OiAnbnVtZXJpYycgXG4gICAgfTtcblxuICAgIC8vIEZvcm1hdCBkYXRlIHVzaW5nIEludGwuRGF0ZVRpbWVGb3JtYXRcbiAgICBjb25zdCBmb3JtYXR0ZWREYXRlID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywgZGF0ZUZvcm1hdE9wdGlvbnMpLmZvcm1hdChkYXRlKTtcblxuICAgIC8vIEV4dHJhY3QgZGF5IGFuZCBhZGQgb3JkaW5hbCBzdWZmaXggKGUuZy4sICdzdCcsICduZCcsICdyZCcsICd0aCcpXG4gICAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgY29uc3QgZGF5U3VmZml4ID0gZ2V0RGF5U3VmZml4KGRheSk7XG5cbiAgICAvLyBCdWlsZCB0aGUgZmluYWwgZm9ybWF0dGVkIHN0cmluZ1xuICAgIGNvbnN0IHBhcnRzID0gZm9ybWF0dGVkRGF0ZS5zcGxpdCgnICcpO1xuICAgIHJldHVybiBgJHtwYXJ0c1swXX0gJHtkYXl9JHtkYXlTdWZmaXh9LCAke3BhcnRzWzJdfWA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgb3JkaW5hbCBzdWZmaXggZm9yIGEgZGF5IG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF5U3VmZml4KGRheTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoZGF5ID4gMyAmJiBkYXkgPCAyMSkgcmV0dXJuICd0aCc7IC8vIFNwZWNpYWwgY2FzZSBmb3IgMTF0aC0xOXRoXG4gICAgc3dpdGNoIChkYXkgJSAxMCkge1xuICAgICAgICBjYXNlIDE6IHJldHVybiAnc3QnO1xuICAgICAgICBjYXNlIDI6IHJldHVybiAnbmQnO1xuICAgICAgICBjYXNlIDM6IHJldHVybiAncmQnO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gJ3RoJztcbiAgICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RyaW5nIG1hdGNoZXMgdGhlIFlZWVktTU0tREQgcGF0dGVyblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlRm9ybWF0KHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9JC8udGVzdCh0ZXh0KTtcbn0iLCAiaW1wb3J0IHsgQXBwLCBOb3RpY2UsIFRGaWxlLCBURm9sZGVyIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgaXNEYXRlRm9ybWF0IH0gZnJvbSAnLi9kYXRlLXV0aWxzJztcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgdGhlIHNwZWNpZmllZCBmb2xkZXIgZXhpc3RzLCBjcmVhdGluZyBpdCBpZiBuZWNlc3NhcnlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuc3VyZUZvbGRlcihhcHA6IEFwcCwgZm9sZGVyUGF0aDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgLy8gSWYgbm8gZm9sZGVyIGlzIHNwZWNpZmllZCwgbm90aGluZyB0byBjcmVhdGVcbiAgICBpZiAoIWZvbGRlclBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgZm9sZGVyIGV4aXN0c1xuICAgIGNvbnN0IGZvbGRlckV4aXN0cyA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZm9sZGVyUGF0aCk7XG4gICAgXG4gICAgLy8gSWYgaXQgZXhpc3RzLCBtYWtlIHN1cmUgaXQncyBhIGZvbGRlclxuICAgIGlmIChmb2xkZXJFeGlzdHMgJiYgIShmb2xkZXJFeGlzdHMgaW5zdGFuY2VvZiBURm9sZGVyKSkge1xuICAgICAgICBuZXcgTm90aWNlKGBDYW5ub3QgY3JlYXRlIGpvdXJuYWwgZm9sZGVyOiBcIiR7Zm9sZGVyUGF0aH1cIiBleGlzdHMgYnV0IGlzIG5vdCBhIGZvbGRlcmApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIC8vIENyZWF0ZSBmb2xkZXIgaWYgaXQgZG9lc24ndCBleGlzdFxuICAgIGlmICghZm9sZGVyRXhpc3RzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuY3JlYXRlRm9sZGVyKGZvbGRlclBhdGgpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgQ3JlYXRlZCBqb3VybmFsIGZvbGRlcjogJHtmb2xkZXJQYXRofWApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBGYWlsZWQgdG8gY3JlYXRlIGpvdXJuYWwgZm9sZGVyOiAke2Vycm9yfWApO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBqb3VybmFsIGZvbGRlcjonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgZnVsbCBwYXRoIGZvciBhIGZpbGUgd2l0aGluIHRoZSBzcGVjaWZpZWQgZm9sZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWxlUGF0aChmb2xkZXI6IHN0cmluZywgZmlsZW5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKGZvbGRlcikge1xuICAgICAgICByZXR1cm4gYCR7Zm9sZGVyfS8ke2ZpbGVuYW1lfWA7XG4gICAgfVxuICAgIHJldHVybiBmaWxlbmFtZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBmaWxlIGlzIGEgam91cm5hbCBmaWxlIGJhc2VkIG9uIGl0cyBuYW1lIHBhdHRlcm4gYW5kIGxvY2F0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0pvdXJuYWxGaWxlKGZpbGU6IFRGaWxlLCBqb3VybmFsRm9sZGVyPzogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgLy8gQ2hlY2sgaWYgYmFzZW5hbWUgbWF0Y2hlcyBZWVlZLU1NLUREIHBhdHRlcm5cbiAgICBjb25zdCBpc0RhdGVCYXNlbmFtZSA9IGlzRGF0ZUZvcm1hdChmaWxlLmJhc2VuYW1lKTtcbiAgICBcbiAgICAvLyBJZiBmb2xkZXIgaXMgc3BlY2lmaWVkLCBhbHNvIGNoZWNrIGlmIHRoZSBmaWxlIGlzIGluIHRoYXQgZm9sZGVyXG4gICAgaWYgKGpvdXJuYWxGb2xkZXIpIHtcbiAgICAgICAgcmV0dXJuIGlzRGF0ZUJhc2VuYW1lICYmIGZpbGUucGF0aC5zdGFydHNXaXRoKGpvdXJuYWxGb2xkZXIgKyAnLycpO1xuICAgIH1cbiAgICBcbiAgICAvLyBJZiBubyBmb2xkZXIgaXMgc3BlY2lmaWVkLCBqdXN0IGNoZWNrIHRoZSBiYXNlbmFtZVxuICAgIHJldHVybiBpc0RhdGVCYXNlbmFtZTtcbn1cblxuLyoqXG4gKiBHZXRzIGFsbCBqb3VybmFsIGZpbGVzIGluIHRoZSB2YXVsdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Sm91cm5hbEZpbGVzKGFwcDogQXBwLCBqb3VybmFsRm9sZGVyPzogc3RyaW5nKTogVEZpbGVbXSB7XG4gICAgLy8gR2V0IGFsbCBtYXJrZG93biBmaWxlcyBpbiB0aGUgdmF1bHRcbiAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cbiAgICAvLyBGaWx0ZXIgZmlsZXMgdGhhdCBmb2xsb3cgYSBkYWlseSBub3RlIHBhdHRlcm4gYW5kIGFyZSBpbiB0aGUgY29ycmVjdCBmb2xkZXJcbiAgICByZXR1cm4gZmlsZXMuZmlsdGVyKChmaWxlKSA9PiBpc0pvdXJuYWxGaWxlKGZpbGUsIGpvdXJuYWxGb2xkZXIpKTtcbn1cblxuLyoqXG4gKiBTb3J0cyBqb3VybmFsIGZpbGVzIGJ5IGRhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNvcnRKb3VybmFsRmlsZXMoZmlsZXM6IFRGaWxlW10sIHNvcnREaXJlY3Rpb246ICduZXdlc3QtZmlyc3QnIHwgJ29sZGVzdC1maXJzdCcpOiBURmlsZVtdIHtcbiAgICByZXR1cm4gZmlsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBpZiAoc29ydERpcmVjdGlvbiA9PT0gJ25ld2VzdC1maXJzdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmJhc2VuYW1lLmxvY2FsZUNvbXBhcmUoYS5iYXNlbmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYS5iYXNlbmFtZS5sb2NhbGVDb21wYXJlKGIuYmFzZW5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBvciBnZXRzIGEgam91cm5hbCBmaWxlIGZvciB0aGUgc3BlY2lmaWVkIGRhdGVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE9yQ3JlYXRlSm91cm5hbEZpbGUoXG4gICAgYXBwOiBBcHAsIFxuICAgIGpvdXJuYWxGb2xkZXI6IHN0cmluZywgXG4gICAgZmlsZW5hbWU6IHN0cmluZyxcbiAgICBpbml0aWFsQ29udGVudDogc3RyaW5nID0gJydcbik6IFByb21pc2U8VEZpbGUgfCBudWxsPiB7XG4gICAgYXdhaXQgZW5zdXJlRm9sZGVyKGFwcCwgam91cm5hbEZvbGRlcik7XG4gICAgXG4gICAgY29uc3QgZmlsZVBhdGggPSBnZXRGaWxlUGF0aChqb3VybmFsRm9sZGVyLCBmaWxlbmFtZSk7XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGZpbGUgYWxyZWFkeSBleGlzdHNcbiAgICBsZXQgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xuICAgIFxuICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgfVxuICAgIFxuICAgIC8vIENyZWF0ZSB0aGUgZmlsZSBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAgdHJ5IHtcbiAgICAgICAgZmlsZSA9IGF3YWl0IGFwcC52YXVsdC5jcmVhdGUoZmlsZVBhdGgsIGluaXRpYWxDb250ZW50KTtcbiAgICAgICAgbmV3IE5vdGljZShgQ3JlYXRlZCBqb3VybmFsIGVudHJ5OiAke2ZpbGVuYW1lfWApO1xuICAgICAgICByZXR1cm4gZmlsZSBhcyBURmlsZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBuZXcgTm90aWNlKGBGYWlsZWQgdG8gY3JlYXRlIGpvdXJuYWwgZW50cnk6ICR7ZXJyb3J9YCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgam91cm5hbCBlbnRyeTonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQTJDOzs7QUNBM0Msc0JBQStDO0FBVXhDLElBQU0sbUJBQXVDO0FBQUEsRUFDaEQsZUFBZTtBQUFBLEVBQ2YsWUFBWTtBQUFBLEVBQ1osZUFBZTtBQUFBLEVBQ2Ysc0JBQXNCO0FBQzFCO0FBRU8sSUFBTSx1QkFBTixjQUFtQyxpQ0FBaUI7QUFBQSxFQUd2RCxZQUFZLEtBQVUsUUFBMEI7QUFDNUMsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDbEI7QUFBQSxFQUVBLFVBQWdCO0FBQ1osVUFBTSxFQUFFLFlBQVksSUFBSTtBQUN4QixnQkFBWSxNQUFNO0FBRWxCLGdCQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFckUsUUFBSSx3QkFBUSxXQUFXLEVBQ2xCLFFBQVEsZ0JBQWdCLEVBQ3hCLFFBQVEseURBQXlELEVBQ2pFLFFBQVEsVUFBUSxLQUNaLGVBQWUsVUFBVSxFQUN6QixTQUFTLEtBQUssT0FBTyxTQUFTLGFBQWEsRUFDM0MsU0FBUyxPQUFPLFVBQVU7QUFFdkIsV0FBSyxPQUFPLFNBQVMsZ0JBQWdCLE1BQU0sUUFBUSxjQUFjLEVBQUU7QUFDbkUsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ25DLENBQUMsQ0FBQztBQUVWLFFBQUksd0JBQVEsV0FBVyxFQUNsQixRQUFRLGFBQWEsRUFDckIsUUFBUSx1REFBdUQsRUFDL0QsUUFBUSxVQUFRLEtBQ1osZUFB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Q04sVUFBVSxNQUFNO0FBQ1osYUFBSyxvQkFBb0I7QUFBQSxNQUM3QjtBQUFBLElBQ0osQ0FBQztBQUdELFNBQUssY0FBYyxJQUFJLHFCQUFxQixLQUFLLEtBQUssSUFBSSxDQUFDO0FBRTNELFNBQUs7QUFBQSxNQUNELEtBQUssSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFDLE1BQU0sU0FBUztBQUUvQyxZQUFJLGdCQUFnQix3QkFBTztBQUN2QixlQUFLLFFBQVEsQ0FBQyxTQUFTO0FBQ25CLGlCQUNLLFNBQVMscUJBQXFCLEVBQzlCLFFBQVEsbUJBQW1CLEVBQzNCLFFBQVEsTUFBTTtBQUVYLG9CQUFNLGNBQWMsS0FBSztBQUN6QixrQkFBSSxhQUFhO0FBRWIsNEJBQVksb0JBQW9CLEtBQUssSUFBSTtBQUFBLGNBQzdDLE9BQU87QUFDSCxvQkFBSSx3QkFBTyxzREFBc0Q7QUFBQSxjQUNyRTtBQUFBLFlBQ0osQ0FBQztBQUFBLFVBQ1QsQ0FBQztBQUFBLFFBQ0w7QUFBQSxNQUNKLENBQUM7QUFBQSxJQUNMO0FBQUEsRUFDSjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsTUFBTSxrQkFBaUM7QUFFbkMsVUFBTSxLQUFLLG9CQUFvQjtBQUcvQixVQUFNLEtBQUssWUFBWSxLQUFLO0FBQUEsRUFDaEM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLE1BQU0sc0JBQXFDO0FBQ3ZDLFVBQU0sT0FBTyxhQUFhO0FBQzFCLFVBQU0sV0FBVyxHQUFHO0FBRXBCLFVBQU0sT0FBTyxNQUFNO0FBQUEsTUFDZixLQUFLO0FBQUEsTUFDTCxLQUFLLFNBQVM7QUFBQSxNQUNkO0FBQUEsSUFDSjtBQUVBLFFBQUksQ0FBQyxNQUFNO0FBQ1AsVUFBSSx3QkFBTywwQ0FBMkM7QUFDdEQ7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBRUEsa0JBQThDO0FBRTFDLFVBQU0sZ0JBQWdCLFNBQVMsaUJBQWlCLHNEQUFzRDtBQUN0RyxRQUFJLGNBQWMsU0FBUyxHQUFHO0FBQzFCLGFBQU8sY0FBYyxDQUFDO0FBQUEsSUFDMUI7QUFDQSxXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ2pCLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDN0U7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNqQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNyQztBQUNKOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiJdCn0K
