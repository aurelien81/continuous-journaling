/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => journalingPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  journalingPluginSetting: "default"
};
var journalingPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Journaling plugin loaded!");
    const ribbonIconEl = this.addRibbonIcon("notebook-text", "Journals", async (evt) => {
      await this.showJournalsInLeaf();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-journal-page",
      name: "Open Journal Page",
      callback: () => {
        this.showJournalsInLeaf();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
  }
  // Function to display journal page
  async openJournalPage() {
    const journalFiles = this.getJournalFiles();
    console.log("Concatenated Journal Content:", journalFiles);
  }
  // Find all journal/daily note files
  getJournalFiles() {
    const files = this.app.vault.getMarkdownFiles();
    console.log("List of files:", files);
    const journalFiles = files.filter((file) => this.isJournalFile(file));
    console.log("List of journal files:", journalFiles);
    new import_obsidian.Notice(`All journal files added to the console.`);
    return journalFiles;
  }
  // Check if a file is a journal file (based on file name or folder)
  isJournalFile(file) {
    const dailyNotePattern = /^\d{4}-\d{2}-\d{2}$/;
    return dailyNotePattern.test(file.basename);
  }
  async showJournalsInLeaf() {
    const journalFiles = this.getJournalFiles();
    if (journalFiles.length === 0) {
      new import_obsidian.Notice("No journal files found.");
      return;
    }
    const leaf = this.app.workspace.getLeaf(true);
    await leaf.setViewState({
      type: "markdown",
      // Set to markdown view type
      active: true
    });
    const contentEl = leaf.view.containerEl;
    contentEl.empty();
    const panel = document.createElement("div");
    panel.classList.add("custom-journal-panel");
    panel.style.overflowY = "scroll";
    panel.style.height = "100vh";
    panel.style.padding = "10px";
    panel.style.border = "1px solid var(--background-modifier-border)";
    panel.style.background = "var(--background-primary)";
    for (const file of journalFiles) {
      const fileContent = await this.app.vault.read(file);
      this.addJournalToPanel(panel, file, fileContent);
    }
    contentEl.appendChild(panel);
  }
  // Helper function to add each journal entry to the panel
  addJournalToPanel(panel, file, content) {
    const journalContainer = document.createElement("div");
    journalContainer.classList.add("journal-entry");
    journalContainer.style.marginBottom = "20px";
    const header = document.createElement("h3");
    header.textContent = file.basename;
    panel.appendChild(header);
    const toggleButton = document.createElement("button");
    toggleButton.textContent = "Toggle Journal View";
    toggleButton.classList.add("collapsible-toggle");
    header.appendChild(toggleButton);
    const collapsibleContent = document.createElement("div");
    collapsibleContent.classList.add("collapsible-content");
    collapsibleContent.style.maxHeight = "0";
    collapsibleContent.style.overflow = "hidden";
    collapsibleContent.style.transition = "max-height 0.3s ease-out";
    panel.appendChild(collapsibleContent);
    const editableContent = document.createElement("textarea");
    editableContent.value = content;
    editableContent.style.width = "100%";
    editableContent.style.height = "300px";
    editableContent.style.fontSize = "16px";
    collapsibleContent.appendChild(editableContent);
    toggleButton.addEventListener("click", () => {
      if (collapsibleContent.style.maxHeight === "0px" || !collapsibleContent.style.maxHeight) {
        collapsibleContent.style.maxHeight = collapsibleContent.scrollHeight + "px";
      } else {
        collapsibleContent.style.maxHeight = "0";
      }
    });
    editableContent.addEventListener("input", async () => {
      await this.app.vault.modify(file, editableContent.value);
      journalContainer.appendChild(editableContent);
      panel.appendChild(journalContainer);
    });
  }
  onunload() {
    console.log("Journal Page Plugin unloaded.");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
