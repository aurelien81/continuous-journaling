/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => journalingPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  journalingPluginSetting: "default"
};
var journalingPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("notebook-text", "Journals", async (evt) => {
      await this.showJournalsInLeaf();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-journal-page",
      name: "Open Journal Page",
      callback: () => {
        this.showJournalsInLeaf();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
  }
  // || --- journal files management ---
  // Find all journal/daily note files
  getJournalFiles() {
    const files = this.app.vault.getMarkdownFiles();
    const journalFiles = files.filter((file) => this.isJournalFile(file));
    return journalFiles;
  }
  // Check if a file is a journal file (based on file name or folder)
  isJournalFile(file) {
    const dailyNotePattern = /^\d{4}-\d{2}-\d{2}$/;
    return dailyNotePattern.test(file.basename);
  }
  // || --- Panel creation inside new tab ---
  async showJournalsInLeaf() {
    const journalFiles = this.getJournalFiles();
    if (journalFiles.length === 0) {
      new import_obsidian.Notice("No journal files found.");
      return;
    }
    const leaf = this.app.workspace.getLeaf(true);
    await leaf.setViewState({
      type: "markdown",
      // Set to markdown view type
      active: true
    });
    const contentElement = leaf.view.containerEl;
    contentElement.empty();
    const panel = document.createElement("div");
    panel.classList.add("custom-journal-panel");
    for (const file of journalFiles) {
      const fileContent = await this.app.vault.read(file);
      this.addJournalToPanel(panel, file, fileContent);
    }
    contentElement.appendChild(panel);
  }
  // || --- Detailed UI creation/update ---
  // Helper function to add each journal entry to the panel
  addJournalToPanel(panel, file, content) {
    const journalEntryHeader = document.createElement("div");
    journalEntryHeader.classList.add("journal-entry-header");
    panel.appendChild(journalEntryHeader);
    const toggleButton = document.createElement("button");
    toggleButton.classList.add("collapsible-toggle");
    toggleButton.classList.add("toggle-expanded");
    journalEntryHeader.appendChild(toggleButton);
    const journalEntryTitle = document.createElement("h3");
    const journalEntryLink = document.createElement("a");
    journalEntryLink.textContent = file.basename;
    journalEntryLink.style.cursor = "pointer";
    journalEntryTitle.appendChild(journalEntryLink);
    journalEntryHeader.appendChild(journalEntryTitle);
    journalEntryLink.addEventListener("click", () => {
      this.app.workspace.openLinkText(file.basename, file.path);
    });
    const collapsibleContent = document.createElement("div");
    collapsibleContent.classList.add("collapsible-content");
    collapsibleContent.classList.add("content-expanded");
    panel.appendChild(collapsibleContent);
    const editableContent = document.createElement("textarea");
    editableContent.classList.add("editable-content");
    editableContent.value = content;
    collapsibleContent.appendChild(editableContent);
    requestAnimationFrame(() => {
      editableContent.style.height = editableContent.scrollHeight + "px";
    });
    editableContent.addEventListener("input", (e) => {
      editableContent.style.height = "auto";
      editableContent.style.height = editableContent.scrollHeight + "px";
    });
    toggleButton.addEventListener("click", () => {
      toggleButton.classList.toggle("toggle-expanded");
      collapsibleContent.classList.toggle("content-expanded");
    });
    editableContent.addEventListener("input", async () => {
      await this.app.vault.modify(file, editableContent.value);
    });
    const horizontalRule = document.createElement("hr");
    horizontalRule.classList.add("journal-horizontal-hr");
    panel.appendChild(horizontalRule);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
