/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JournalingPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  journalFolder: "journals",
  dateFormat: "YYYY-MM-DD",
  sortDirection: "newest-first",
  defaultExpandEntries: true,
  folderFormat: ""
};
var JournalingSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Continuous Journaling Settings" });
    new import_obsidian.Setting(containerEl).setName("Journal Folder").setDesc("Specify the folder where journal entries will be stored").addText((text) => text.setPlaceholder("journals").setValue(this.plugin.settings.journalFolder).onChange(async (value) => {
      this.plugin.settings.journalFolder = value.replace(/^\/+|\/+$/g, "");
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Date Format").setDesc("Format for journal filenames (YYYY-MM-DD recommended)").addText((text) => text.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async (value) => {
      this.plugin.settings.dateFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sort Direction").setDesc("How to sort journal entries in the continuous view").addDropdown((dropdown) => dropdown.addOption("newest-first", "Newest entries first").addOption("oldest-first", "Oldest entries first").setValue(this.plugin.settings.sortDirection).onChange(async (value) => {
      this.plugin.settings.sortDirection = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Expand Entries").setDesc("Automatically expand entries when opening the journals view").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultExpandEntries).onChange(async (value) => {
      this.plugin.settings.defaultExpandEntries = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Folder Structure Format").setDesc('Format pattern for organizing journal entries in subfolders. Examples: empty for flat structure, "YYYY" for yearly folders, "YYYY/MM" for monthly folders.').addText((text) => text.setPlaceholder("YYYY/MM").setValue(this.plugin.settings.folderFormat).onChange(async (value) => {
      this.plugin.settings.folderFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Migrate Journal Entries").setDesc("Move existing journal entries to the folder structure defined by the folder format pattern.").addButton((button) => button.setButtonText("Migrate Entries").setCta().onClick(async () => {
      await this.plugin.migrateJournalEntries();
    }));
  }
};

// src/journal-view.ts
var import_obsidian3 = require("obsidian");

// src/utils/date-utils.ts
function getTodayDate() {
  const today = new Date();
  return formatDateString(today);
}
function formatDateString(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}
function formatDateForDisplay(dateString) {
  const date = new Date(dateString);
  const dateFormatOptions = {
    month: "short",
    year: "numeric",
    day: "numeric"
  };
  const formattedDate = new Intl.DateTimeFormat("en-US", dateFormatOptions).format(date);
  const day = date.getDate();
  const daySuffix = getDaySuffix(day);
  const parts = formattedDate.split(" ");
  return `${parts[0]} ${day}${daySuffix}, ${parts[2]}`;
}
function getDaySuffix(day) {
  if (day > 3 && day < 21)
    return "th";
  switch (day % 10) {
    case 1:
      return "st";
    case 2:
      return "nd";
    case 3:
      return "rd";
    default:
      return "th";
  }
}
function isDateFormat(text) {
  return /^\d{4}-\d{2}-\d{2}$/.test(text);
}

// src/utils/file-utils.ts
var import_obsidian2 = require("obsidian");
function getFilePath(folder, filename) {
  if (folder) {
    return `${folder}/${filename}`;
  }
  return filename;
}
async function ensureFolder(app, folderPath) {
  if (!folderPath) {
    return true;
  }
  const folderExists = app.vault.getAbstractFileByPath(folderPath);
  if (folderExists && !(folderExists instanceof import_obsidian2.TFolder)) {
    new import_obsidian2.Notice(`Cannot create folder: "${folderPath}" exists but is not a folder`);
    return false;
  }
  if (!folderExists) {
    try {
      await app.vault.createFolder(folderPath);
      new import_obsidian2.Notice(`Created folder: ${folderPath}`);
      return true;
    } catch (error) {
      new import_obsidian2.Notice(`Failed to create folder: ${error}`);
      console.error("Failed to create folder:", error);
      return false;
    }
  }
  return true;
}
function getJournalFilePath(journalFolder, filename, folderFormat = "") {
  if (!folderFormat) {
    return getFilePath(journalFolder, filename);
  }
  const datePart = filename.split(".")[0];
  if (!isDateFormat(datePart)) {
    return getFilePath(journalFolder, filename);
  }
  const [year, month, day] = datePart.split("-").map((part) => parseInt(part));
  let formattedPath = folderFormat;
  formattedPath = formattedPath.replace("YYYY", year.toString());
  formattedPath = formattedPath.replace("MM", month.toString().padStart(2, "0"));
  formattedPath = formattedPath.replace("DD", day.toString().padStart(2, "0"));
  if (journalFolder) {
    return `${journalFolder}/${formattedPath}/${filename}`;
  }
  return `${formattedPath}/${filename}`;
}
async function ensureAllFolders(app, filePath) {
  const pathParts = filePath.split("/");
  const fileNameIndex = pathParts.length - 1;
  let currentFolder = "";
  for (let i = 0; i < fileNameIndex; i++) {
    if (currentFolder) {
      currentFolder += "/";
    }
    currentFolder += pathParts[i];
    if (!currentFolder)
      continue;
    if (!await ensureFolder(app, currentFolder)) {
      return false;
    }
  }
  return true;
}
async function getOrCreateJournalFile(app, journalFolder, filename, folderFormat = "", initialContent = "") {
  const filePath = getJournalFilePath(journalFolder, filename, folderFormat);
  if (!await ensureAllFolders(app, filePath)) {
    return null;
  }
  let file = app.vault.getAbstractFileByPath(filePath);
  if (file instanceof import_obsidian2.TFile) {
    return file;
  }
  try {
    file = await app.vault.create(filePath, initialContent);
    new import_obsidian2.Notice(`Created journal entry: ${filename}`);
    return file;
  } catch (error) {
    new import_obsidian2.Notice(`Failed to create journal entry: ${error}`);
    console.error("Failed to create journal entry:", error);
    return null;
  }
}
function isJournalFile(file, journalFolder, folderFormat) {
  const isDateBasename = isDateFormat(file.basename);
  if (!isDateBasename) {
    return false;
  }
  if (!journalFolder) {
    return true;
  }
  if (folderFormat) {
    const dateStr = file.basename.split(".")[0];
    const [year, month, day] = dateStr.split("-");
    let expectedPath = folderFormat;
    expectedPath = expectedPath.replace("YYYY", year);
    expectedPath = expectedPath.replace("MM", month);
    expectedPath = expectedPath.replace("DD", day);
    const expectedFullPath = `${journalFolder}/${expectedPath}`;
    return file.path.startsWith(expectedFullPath);
  }
  return file.path.startsWith(journalFolder + "/");
}
function getJournalFiles(app, journalFolder, folderFormat) {
  const files = app.vault.getMarkdownFiles();
  return files.filter((file) => isJournalFile(file, journalFolder, folderFormat));
}
function sortJournalFiles(files, sortDirection) {
  return files.sort((a, b) => {
    if (sortDirection === "newest-first") {
      return b.basename.localeCompare(a.basename);
    } else {
      return a.basename.localeCompare(b.basename);
    }
  });
}

// src/journal-view.ts
var JournalView = class {
  constructor(plugin) {
    this.activeEditor = null;
    // Simple lazy loading properties
    this.allFiles = [];
    this.batchSize = 10;
    this.currentBatch = 0;
    this.loadMoreButton = null;
    this.plugin = plugin;
    this.registerCleanup();
  }
  // Opens the continuous journal view in a new leaf
  async open() {
    const leaf = this.plugin.app.workspace.getLeaf(true);
    await leaf.setViewState({
      type: "markdown",
      active: true
    });
    const contentEl = leaf.view.containerEl;
    contentEl.empty();
    const panel = contentEl.createDiv({ cls: "custom-journal-panel" });
    const journalFiles = getJournalFiles(
      this.plugin.app,
      this.plugin.settings.journalFolder,
      this.plugin.settings.folderFormat
    );
    if (journalFiles.length === 0) {
      new import_obsidian3.Notice("No journal entries found.");
      panel.createEl("div", {
        cls: "journal-empty-state",
        text: "No journal entries found. Create one by clicking the journals icon in the ribbon."
      });
      return;
    }
    this.allFiles = sortJournalFiles(journalFiles, this.plugin.settings.sortDirection);
    this.currentBatch = 0;
    await this.loadBatch(panel);
    if (this.currentBatch * this.batchSize < this.allFiles.length) {
      this.addLoadMoreButton(panel);
    }
  }
  // Load a batch of entries
  async loadBatch(panel) {
    const start = this.currentBatch * this.batchSize;
    const end = Math.min(start + this.batchSize, this.allFiles.length);
    panel.querySelectorAll(".journal-load-more-button").forEach((btn) => btn.remove());
    this.loadMoreButton = null;
    const filesToLoad = this.allFiles.slice(start, end);
    for (const file of filesToLoad) {
      try {
        const fileContent = await this.plugin.app.vault.read(file);
        this.addJournalEntry(panel, file, fileContent);
      } catch (error) {
        console.error(`Error reading file ${file.path}:`, error);
        this.addErrorMessage(panel, file.basename, error);
      }
    }
    this.currentBatch++;
    panel.querySelectorAll(".journal-load-more-button").forEach((btn) => btn.remove());
    if (this.currentBatch * this.batchSize < this.allFiles.length) {
      this.addLoadMoreButton(panel);
    }
  }
  // Add a "Load More" button
  addLoadMoreButton(panel) {
    panel.querySelectorAll(".journal-load-more-button").forEach((btn) => btn.remove());
    this.loadMoreButton = panel.createEl("button", {
      cls: "journal-load-more-button",
      text: "Load More Entries"
    });
    panel.appendChild(this.loadMoreButton);
    this.loadMoreButton.addEventListener("click", async () => {
      if (this.loadMoreButton) {
        this.loadMoreButton.textContent = "Loading...";
        this.loadMoreButton.setAttr("disabled", "true");
      }
      await this.loadBatch(panel);
    });
  }
  // Adds an error message to the panel when file reading fails
  addErrorMessage(panel, filename, error) {
    const errorDiv = panel.createDiv({ cls: "journal-entry journal-error" });
    const errorHeader = errorDiv.createDiv({ cls: "journal-entry-header" });
    errorHeader.createEl("h3", {
      cls: "journal-entry-title",
      text: `${filename} - Error`
    });
    const errorContent = errorDiv.createDiv({ cls: "journal-error-content" });
    errorContent.textContent = `Failed to load journal: ${error.message || error}`;
  }
  // Adds a journal entry to the panel
  addJournalEntry(panel, file, content) {
    const journalDate = file.basename;
    const journalEntry = panel.createDiv({ cls: "journal-entry" });
    const header = journalEntry.createDiv({ cls: "journal-entry-header" });
    const toggleButton = header.createEl("button", { cls: "collapsible-toggle" });
    if (this.plugin.settings.defaultExpandEntries) {
      toggleButton.addClass("toggle-expanded");
    }
    const title = header.createEl("h3", { cls: "journal-entry-title" });
    const titleLink = title.createEl("a", {
      cls: "journal-entry-link",
      text: formatDateForDisplay(journalDate)
    });
    titleLink.addEventListener("click", (event) => {
      event.preventDefault();
      this.plugin.app.workspace.openLinkText(file.basename, file.path);
    });
    const contentArea = journalEntry.createDiv({
      cls: "collapsible-content" + (this.plugin.settings.defaultExpandEntries ? " content-expanded" : "")
    });
    let currentContent = content;
    let isEditing = false;
    const renderedContent = contentArea.createDiv({
      cls: "rendered-content active-view"
    });
    const editableContent = contentArea.createEl("textarea", {
      cls: "editable-content",
      value: currentContent
    });
    const closeButton = contentArea.createEl("button", {
      cls: "journal-close-button",
      text: "Close"
    });
    closeButton.style.display = "none";
    const saveIndicator = contentArea.createDiv({
      cls: "journal-save-indicator",
      text: "Saved"
    });
    saveIndicator.style.display = "none";
    window.requestAnimationFrame(() => {
      editableContent.style.height = editableContent.scrollHeight + "px";
    });
    const renderContent = () => {
      renderedContent.empty();
      import_obsidian3.MarkdownRenderer.render(this.plugin.app, currentContent, renderedContent, file.path, this.plugin);
      this.makeHashtagsClickable(renderedContent);
    };
    renderContent();
    const enterEditMode = () => {
      isEditing = true;
      this.activeEditor = editableContent;
      editableContent.value = currentContent;
      renderedContent.classList.remove("active-view");
      editableContent.classList.add("active-view");
      closeButton.style.display = "block";
      editableContent.style.height = "auto";
      editableContent.style.height = editableContent.scrollHeight + "px";
      editableContent.focus();
    };
    const exitEditMode = async () => {
      if (isEditing) {
        currentContent = editableContent.value;
        await this.saveContentToFile(file, currentContent);
        renderContent();
        editableContent.classList.remove("active-view");
        closeButton.style.display = "none";
        renderedContent.classList.add("active-view");
        isEditing = false;
        if (this.activeEditor === editableContent) {
          this.activeEditor = null;
        }
      }
    };
    renderedContent.addEventListener("click", (event) => {
      const target = event.target;
      if (target.tagName === "A" || target.closest("a") || target.classList.contains("cm-hashtag") || target.closest(".cm-hashtag")) {
        return;
      }
      enterEditMode();
    });
    closeButton.addEventListener("click", () => {
      exitEditMode();
    });
    editableContent.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        exitEditMode();
      }
    });
    editableContent.addEventListener("input", () => {
      editableContent.style.height = "auto";
      editableContent.style.height = editableContent.scrollHeight + "px";
      currentContent = editableContent.value;
    });
    let saveTimeout = null;
    editableContent.addEventListener("input", () => {
      saveIndicator.style.display = "block";
      saveIndicator.classList.remove("saved");
      saveIndicator.classList.add("saving");
      saveIndicator.textContent = "Saving...";
      if (saveTimeout) {
        clearTimeout(saveTimeout);
      }
      saveTimeout = setTimeout(async () => {
        await this.saveContentToFile(file, currentContent);
        saveIndicator.classList.remove("saving");
        saveIndicator.classList.add("saved");
        saveIndicator.textContent = "Saved";
        setTimeout(() => {
          if (saveIndicator.classList.contains("saved")) {
            saveIndicator.style.display = "none";
          }
        }, 2e3);
      }, 500);
    });
    toggleButton.addEventListener("click", () => {
      toggleButton.classList.toggle("toggle-expanded");
      contentArea.classList.toggle("content-expanded");
    });
  }
  /**
   * Saves the content to the file
   */
  async saveContentToFile(file, content) {
    try {
      await this.plugin.app.vault.modify(file, content);
    } catch (error) {
      new import_obsidian3.Notice(`Failed to save changes: ${error}`);
      console.error("Failed to save changes:", error);
    }
  }
  /**
   * Inserts a reference to a file into the active journal entry
   */
  insertFileReference(filePath) {
    if (!this.activeEditor) {
      new import_obsidian3.Notice("No active journal entry to insert file into");
      return;
    }
    const file = this.plugin.app.vault.getAbstractFileByPath(filePath);
    if (!(file instanceof import_obsidian3.TFile)) {
      new import_obsidian3.Notice("Invalid file");
      return;
    }
    let fileReference;
    if (this.isImageFile(file)) {
      fileReference = `![[${file.name}]]`;
    } else if (this.isMarkdownFile(file)) {
      fileReference = `![[${file.name}]]`;
    } else {
      fileReference = `![[${file.name}]]`;
    }
    this.activeEditor.focus();
    const cursorPos = this.activeEditor.selectionStart;
    const textBefore = this.activeEditor.value.substring(0, cursorPos);
    const textAfter = this.activeEditor.value.substring(this.activeEditor.selectionEnd);
    const newText = textBefore + "\n\n" + fileReference + "\n\n" + textAfter;
    this.activeEditor.value = newText;
    const newCursorPos = cursorPos + fileReference.length + 4;
    this.activeEditor.setSelectionRange(newCursorPos, newCursorPos);
    const inputEvent = new Event("input", { bubbles: true, cancelable: true });
    this.activeEditor.dispatchEvent(inputEvent);
    new import_obsidian3.Notice(`Inserted reference to ${file.name}`);
  }
  /**
   * Check if a file is an image
   */
  isImageFile(file) {
    const imageExtensions = ["png", "jpg", "jpeg", "gif", "svg", "webp"];
    const ext = file.extension.toLowerCase();
    return imageExtensions.includes(ext);
  }
  /**
   * Check if a file is a markdown file
   */
  isMarkdownFile(file) {
    const ext = file.extension.toLowerCase();
    return ext === "md" || ext === "markdown";
  }
  registerCleanup() {
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("layout-change", () => {
        if (this.activeEditor) {
          const journalEntry = this.activeEditor.closest(".journal-entry");
          if (journalEntry) {
            const event = new KeyboardEvent("keydown", { key: "Escape" });
            this.activeEditor.dispatchEvent(event);
          }
          this.activeEditor = null;
        }
      })
    );
  }
  makeHashtagsClickable(contentEl) {
    const hashtags = contentEl.querySelectorAll(".cm-hashtag, .tag");
    hashtags.forEach((tag) => {
      var _a;
      if (tag instanceof HTMLElement) {
        const newTag = tag.cloneNode(true);
        (_a = tag.parentNode) == null ? void 0 : _a.replaceChild(newTag, tag);
        newTag.addEventListener("click", (e) => {
          var _a2;
          e.preventDefault();
          e.stopPropagation();
          const hashtagText = ((_a2 = newTag.textContent) == null ? void 0 : _a2.trim()) || "";
          this.openSearchWithHashtag(hashtagText);
        });
        newTag.style.cursor = "pointer";
      }
    });
  }
  openSearchWithHashtag(hashtag) {
    var _a, _b;
    const searchTerm = hashtag.startsWith("#") ? hashtag : `#${hashtag}`;
    try {
      if ((_a = this.plugin.app.internalPlugins.getPluginById("global-search")) == null ? void 0 : _a.instance.openGlobalSearch) {
        (_b = this.plugin.app.internalPlugins.getPluginById("global-search")) == null ? void 0 : _b.instance.openGlobalSearch(searchTerm);
        return;
      }
      if (this.plugin.app.commands.executeCommandById("global-search:open")) {
        setTimeout(() => {
          const searchInput = document.querySelector(".search-input-container input");
          if (searchInput instanceof HTMLInputElement) {
            searchInput.value = searchTerm;
            searchInput.dispatchEvent(new Event("input", { bubbles: true }));
          }
        }, 100);
        return;
      }
      const searchLeaf = this.plugin.app.workspace.getLeavesOfType("search")[0];
      if (searchLeaf) {
        this.plugin.app.workspace.setActiveLeaf(searchLeaf, { focus: true });
        setTimeout(() => {
          const searchInput = document.querySelector(".search-input-container input");
          if (searchInput instanceof HTMLInputElement) {
            searchInput.value = searchTerm;
            searchInput.dispatchEvent(new Event("input", { bubbles: true }));
          }
        }, 100);
        return;
      }
      new import_obsidian3.Notice(`Search for: ${searchTerm}`);
    } catch (error) {
      console.error("Error opening search:", error);
      new import_obsidian3.Notice(`Could not open search. Please search for: ${searchTerm}`);
    }
  }
};

// src/main.ts
var JournalingPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.journalView = new JournalView(this);
    const ribbonIconEl = this.addRibbonIcon(
      "notebook-text",
      "Open Journals",
      async (evt) => {
        await this.openJournalView();
      }
    );
    ribbonIconEl.addClass("journaling-ribbon-icon");
    this.addCommand({
      id: "open-journal-view",
      name: "Open Journal View",
      callback: () => {
        this.openJournalView();
      }
    });
    this.addCommand({
      id: "create-todays-journal",
      name: "Create/Open Today's Journal",
      callback: () => {
        this.createTodaysJournal();
      }
    });
    this.addSettingTab(new JournalingSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian4.TFile) {
          menu.addItem((item) => {
            item.setTitle("Insert into Journal").setIcon("text-cursor-input").onClick(() => {
              const journalView = this.journalView;
              if (journalView) {
                journalView.insertFileReference(file.path);
              } else {
                new import_obsidian4.Notice("Open the journal view first to insert file reference");
              }
            });
          });
        }
      })
    );
  }
  // Opens the continuous journal view
  async openJournalView() {
    await this.createTodaysJournal();
    await this.journalView.open();
  }
  // Creates or opens today's journal entry
  async createTodaysJournal() {
    const date = getTodayDate();
    const fileName = `${date}.md`;
    const file = await getOrCreateJournalFile(
      this.app,
      this.settings.journalFolder,
      fileName,
      this.settings.folderFormat
      // Pass the folder format setting
    );
    if (!file) {
      new import_obsidian4.Notice("Failed to create or open today's journal");
      return;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * Migrates existing journal entries to the new folder structure
   */
  async migrateJournalEntries() {
    const journalFiles = getJournalFiles(
      this.app,
      this.settings.journalFolder,
      ""
      // Use empty folder format to get all files regardless of structure
    );
    if (journalFiles.length === 0) {
      new import_obsidian4.Notice("No journal entries found to migrate.");
      return;
    }
    if (!this.settings.folderFormat) {
      new import_obsidian4.Notice("Please set a folder format in settings before migrating.");
      return;
    }
    const confirmMessage = `Migrate ${journalFiles.length} journal entries to new folder structure? This will:
    1. Move files to folders based on the pattern: ${this.settings.folderFormat}
    2. Create any necessary folders
    3. Keep the original filename
    
    This operation cannot be undone automatically.`;
    if (!confirm(confirmMessage)) {
      return;
    }
    const modal = new MigrationModal(this.app, journalFiles.length);
    modal.open();
    let migratedCount = 0;
    let errorCount = 0;
    for (const file of journalFiles) {
      try {
        modal.updateStatus(`Migrating ${file.name}...`);
        const newPath = getJournalFilePath(
          this.settings.journalFolder,
          file.name,
          this.settings.folderFormat
        );
        if (file.path === newPath) {
          migratedCount++;
          modal.updateProgress(migratedCount);
          continue;
        }
        const content = await this.app.vault.read(file);
        await ensureAllFolders(this.app, newPath);
        await this.app.vault.create(newPath, content);
        await this.app.vault.delete(file);
        migratedCount++;
        modal.updateProgress(migratedCount);
      } catch (error) {
        console.error(`Error migrating file ${file.path}:`, error);
        modal.updateStatus(`Error migrating ${file.name}: ${error}`);
        errorCount++;
      }
    }
    modal.updateStatus(`Migration complete! Migrated ${migratedCount} files with ${errorCount} errors.`);
    setTimeout(() => {
      modal.close();
      new import_obsidian4.Notice(`Migration complete! Migrated ${migratedCount} files with ${errorCount} errors.`);
    }, 3e3);
  }
};
var MigrationModal = class extends import_obsidian4.Modal {
  constructor(app, totalFiles) {
    super(app);
    this.totalFiles = totalFiles;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Migrating Journal Entries" });
    this.progressEl = contentEl.createEl("div", {
      cls: "migration-progress",
      text: "0/" + this.totalFiles
    });
    this.statusEl = contentEl.createEl("div", {
      cls: "migration-status",
      text: "Starting migration..."
    });
  }
  updateProgress(completed) {
    this.progressEl.textContent = `${completed}/${this.totalFiles}`;
  }
  updateStatus(message) {
    this.statusEl.textContent = message;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
