/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JournalingPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  journalFolder: "journals",
  dateFormat: "YYYY-MM-DD",
  sortDirection: "newest-first",
  defaultExpandEntries: true
};
var JournalingSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Continuous Journaling Settings" });
    new import_obsidian.Setting(containerEl).setName("Journal Folder").setDesc("Specify the folder where journal entries will be stored").addText((text) => text.setPlaceholder("journals").setValue(this.plugin.settings.journalFolder).onChange(async (value) => {
      this.plugin.settings.journalFolder = value.replace(/^\/+|\/+$/g, "");
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Date Format").setDesc("Format for journal filenames (YYYY-MM-DD recommended)").addText((text) => text.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async (value) => {
      this.plugin.settings.dateFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sort Direction").setDesc("How to sort journal entries in the continuous view").addDropdown((dropdown) => dropdown.addOption("newest-first", "Newest entries first").addOption("oldest-first", "Oldest entries first").setValue(this.plugin.settings.sortDirection).onChange(async (value) => {
      this.plugin.settings.sortDirection = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Expand Entries").setDesc("Automatically expand entries when opening the journals view").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultExpandEntries).onChange(async (value) => {
      this.plugin.settings.defaultExpandEntries = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/journal-view.ts
var import_obsidian3 = require("obsidian");

// src/utils/date-utils.ts
function getTodayDate() {
  const today = new Date();
  return formatDateString(today);
}
function formatDateString(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}
function formatDateForDisplay(dateString) {
  const date = new Date(dateString);
  const dateFormatOptions = {
    month: "short",
    year: "numeric",
    day: "numeric"
  };
  const formattedDate = new Intl.DateTimeFormat("en-US", dateFormatOptions).format(date);
  const day = date.getDate();
  const daySuffix = getDaySuffix(day);
  const parts = formattedDate.split(" ");
  return `${parts[0]} ${day}${daySuffix}, ${parts[2]}`;
}
function getDaySuffix(day) {
  if (day > 3 && day < 21)
    return "th";
  switch (day % 10) {
    case 1:
      return "st";
    case 2:
      return "nd";
    case 3:
      return "rd";
    default:
      return "th";
  }
}
function isDateFormat(text) {
  return /^\d{4}-\d{2}-\d{2}$/.test(text);
}

// src/utils/file-utils.ts
var import_obsidian2 = require("obsidian");
async function ensureFolder(app, folderPath) {
  if (!folderPath) {
    return true;
  }
  const folderExists = app.vault.getAbstractFileByPath(folderPath);
  if (folderExists && !(folderExists instanceof import_obsidian2.TFolder)) {
    new import_obsidian2.Notice(`Cannot create journal folder: "${folderPath}" exists but is not a folder`);
    return false;
  }
  if (!folderExists) {
    try {
      await app.vault.createFolder(folderPath);
      new import_obsidian2.Notice(`Created journal folder: ${folderPath}`);
      return true;
    } catch (error) {
      new import_obsidian2.Notice(`Failed to create journal folder: ${error}`);
      console.error("Failed to create journal folder:", error);
      return false;
    }
  }
  return true;
}
function getFilePath(folder, filename) {
  if (folder) {
    return `${folder}/${filename}`;
  }
  return filename;
}
function isJournalFile(file, journalFolder) {
  const isDateBasename = isDateFormat(file.basename);
  if (journalFolder) {
    return isDateBasename && file.path.startsWith(journalFolder + "/");
  }
  return isDateBasename;
}
function getJournalFiles(app, journalFolder) {
  const files = app.vault.getMarkdownFiles();
  return files.filter((file) => isJournalFile(file, journalFolder));
}
function sortJournalFiles(files, sortDirection) {
  return files.sort((a, b) => {
    if (sortDirection === "newest-first") {
      return b.basename.localeCompare(a.basename);
    } else {
      return a.basename.localeCompare(b.basename);
    }
  });
}
async function getOrCreateJournalFile(app, journalFolder, filename, initialContent = "") {
  await ensureFolder(app, journalFolder);
  const filePath = getFilePath(journalFolder, filename);
  let file = app.vault.getAbstractFileByPath(filePath);
  if (file instanceof import_obsidian2.TFile) {
    return file;
  }
  try {
    file = await app.vault.create(filePath, initialContent);
    new import_obsidian2.Notice(`Created journal entry: ${filename}`);
    return file;
  } catch (error) {
    new import_obsidian2.Notice(`Failed to create journal entry: ${error}`);
    console.error("Failed to create journal entry:", error);
    return null;
  }
}

// src/journal-view.ts
var JournalView = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Opens the continuous journal view in a new leaf
   */
  async open() {
    const leaf = this.plugin.app.workspace.getLeaf(true);
    await leaf.setViewState({
      type: "markdown",
      active: true
    });
    const contentEl = leaf.view.containerEl;
    contentEl.empty();
    const panel = contentEl.createDiv({ cls: "custom-journal-panel" });
    const journalFiles = getJournalFiles(this.plugin.app, this.plugin.settings.journalFolder);
    if (journalFiles.length === 0) {
      new import_obsidian3.Notice("No journal entries found.");
      panel.createEl("div", {
        cls: "journal-empty-state",
        text: "No journal entries found. Create one by clicking the journals icon in the ribbon."
      });
      return;
    }
    const sortedFiles = sortJournalFiles(journalFiles, this.plugin.settings.sortDirection);
    for (const file of sortedFiles) {
      try {
        const fileContent = await this.plugin.app.vault.read(file);
        this.addJournalEntry(panel, file, fileContent);
      } catch (error) {
        console.error(`Error reading file ${file.path}:`, error);
        this.addErrorMessage(panel, file.basename, error);
      }
    }
  }
  /**
   * Adds an error message to the panel when file reading fails
   */
  addErrorMessage(panel, filename, error) {
    const errorDiv = panel.createDiv({ cls: "journal-entry journal-error" });
    const errorHeader = errorDiv.createDiv({ cls: "journal-entry-header" });
    errorHeader.createEl("h3", {
      cls: "journal-entry-title",
      text: `${filename} - Error`
    });
    const errorContent = errorDiv.createDiv({ cls: "journal-error-content" });
    errorContent.textContent = `Failed to load journal: ${error.message || error}`;
  }
  /**
   * Adds a journal entry to the panel
   */
  addJournalEntry(panel, file, content) {
    const journalDate = file.basename;
    const journalEntry = panel.createDiv({ cls: "journal-entry" });
    const header = journalEntry.createDiv({ cls: "journal-entry-header" });
    const toggleButton = header.createEl("button", { cls: "collapsible-toggle" });
    if (this.plugin.settings.defaultExpandEntries) {
      toggleButton.addClass("toggle-expanded");
    }
    const title = header.createEl("h3", { cls: "journal-entry-title" });
    const titleLink = title.createEl("a", {
      cls: "journal-entry-link",
      text: formatDateForDisplay(journalDate)
    });
    titleLink.addEventListener("click", (event) => {
      event.preventDefault();
      this.plugin.app.workspace.openLinkText(file.basename, file.path);
    });
    const contentArea = journalEntry.createDiv({
      cls: "collapsible-content" + (this.plugin.settings.defaultExpandEntries ? " content-expanded" : "")
    });
    let currentContent = content;
    const renderedContent = contentArea.createDiv({
      cls: "rendered-content active-view"
    });
    const editableContent = contentArea.createEl("textarea", {
      cls: "editable-content",
      value: currentContent
    });
    const saveIndicator = contentArea.createDiv({
      cls: "journal-save-indicator",
      text: "Saving..."
    });
    window.requestAnimationFrame(() => {
      editableContent.style.height = editableContent.scrollHeight + "px";
    });
    let isDragging = false;
    const renderContent = () => {
      renderedContent.empty();
      import_obsidian3.MarkdownRenderer.render(this.plugin.app, currentContent, renderedContent, file.path, this.plugin);
    };
    renderContent();
    const enterEditMode = () => {
      editableContent.value = currentContent;
      renderedContent.classList.remove("active-view");
      editableContent.classList.add("active-view");
      editableContent.style.height = "auto";
      editableContent.style.height = editableContent.scrollHeight + "px";
      editableContent.focus();
    };
    const exitEditMode = async () => {
      if (isDragging) {
        return;
      }
      currentContent = editableContent.value;
      await this.saveContentToFile(file, currentContent);
      renderContent();
      editableContent.classList.remove("active-view");
      renderedContent.classList.add("active-view");
    };
    renderedContent.addEventListener("click", (event) => {
      const target = event.target;
      if (target.tagName === "A" || target.closest("a") || target.classList.contains("cm-hashtag") || target.closest(".cm-hashtag")) {
        return;
      }
      enterEditMode();
    });
    editableContent.addEventListener("blur", () => {
      setTimeout(() => {
        exitEditMode();
      }, 100);
    });
    editableContent.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        editableContent.blur();
      }
    });
    editableContent.addEventListener("dragenter", (event) => {
      isDragging = true;
      event.preventDefault();
      editableContent.classList.add("is-dragging-over");
    });
    editableContent.addEventListener("dragover", (event) => {
      event.preventDefault();
    });
    editableContent.addEventListener("dragleave", () => {
      editableContent.classList.remove("is-dragging-over");
    });
    editableContent.addEventListener("drop", async (event) => {
      event.preventDefault();
      editableContent.classList.remove("is-dragging-over");
      if (event.dataTransfer && event.dataTransfer.files && event.dataTransfer.files.length > 0) {
        try {
          for (let i = 0; i < event.dataTransfer.files.length; i++) {
            const file2 = event.dataTransfer.files[i];
            if (file2.type.startsWith("image/")) {
              await this.handleImageDrop(file2, editableContent, this.plugin.settings.journalFolder);
            }
          }
        } catch (error) {
          console.error("Error handling dropped files:", error);
          new import_obsidian3.Notice(`Error handling dropped files: ${error}`);
        }
      }
      setTimeout(() => {
        isDragging = false;
      }, 200);
    });
    editableContent.addEventListener("input", () => {
      editableContent.style.height = "auto";
      editableContent.style.height = editableContent.scrollHeight + "px";
      currentContent = editableContent.value;
    });
    let saveTimeout = null;
    editableContent.addEventListener("input", () => {
      saveIndicator.classList.remove("saved");
      saveIndicator.classList.add("saving");
      saveIndicator.textContent = "Saving...";
      if (saveTimeout) {
        clearTimeout(saveTimeout);
      }
      saveTimeout = setTimeout(async () => {
        await this.saveContentToFile(file, currentContent);
        saveIndicator.classList.remove("saving");
        saveIndicator.classList.add("saved");
        saveIndicator.textContent = "Saved";
      }, 500);
    });
    toggleButton.addEventListener("click", () => {
      toggleButton.classList.toggle("toggle-expanded");
      contentArea.classList.toggle("content-expanded");
    });
  }
  /**
   * Handles an image drop operation
   */
  async handleImageDrop(file, textarea, journalFolder) {
    const reader = new FileReader();
    reader.onload = async (event) => {
      if (event.target && event.target.result) {
        try {
          const buffer = await this.fileToArrayBuffer(file);
          const timestamp = Date.now();
          const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9-_.]/g, "_");
          const imageName = `journal-img-${timestamp}-${sanitizedFileName}`;
          let imageFolderPath = journalFolder ? `${journalFolder}/images` : "images";
          try {
            await this.plugin.app.vault.createFolder(imageFolderPath);
          } catch (error) {
          }
          const imagePath = `${imageFolderPath}/${imageName}`;
          await this.plugin.app.vault.createBinary(imagePath, buffer);
          const imageMarkdown = `![${file.name}](${imagePath})`;
          this.insertTextAtCursor(textarea, imageMarkdown);
          const inputEvent = new Event("input", { bubbles: true, cancelable: true });
          textarea.dispatchEvent(inputEvent);
          new import_obsidian3.Notice(`Image "${file.name}" added`);
        } catch (error) {
          console.error("Error saving image:", error);
          new import_obsidian3.Notice(`Error saving image: ${error}`);
        }
      }
    };
    reader.readAsDataURL(file);
  }
  /**
   * Converts a File to ArrayBuffer
   */
  fileToArrayBuffer(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
      reader.readAsArrayBuffer(file);
    });
  }
  /**
   * Inserts text at the cursor position in a textarea
   */
  insertTextAtCursor(textarea, text) {
    const cursorPos = textarea.selectionStart;
    const textBefore = textarea.value.substring(0, cursorPos);
    const textAfter = textarea.value.substring(textarea.selectionEnd);
    const newText = textBefore + "\n\n" + text + "\n\n" + textAfter;
    textarea.value = newText;
    const newCursorPos = cursorPos + text.length + 4;
    textarea.setSelectionRange(newCursorPos, newCursorPos);
  }
  /**
   * Saves the content to the file
   */
  async saveContentToFile(file, content) {
    try {
      await this.plugin.app.vault.modify(file, content);
    } catch (error) {
      new import_obsidian3.Notice(`Failed to save changes: ${error}`);
      console.error("Failed to save changes:", error);
    }
  }
};

// src/main.ts
var JournalingPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.journalView = new JournalView(this);
    const ribbonIconEl = this.addRibbonIcon(
      "notebook-text",
      "Open Journals",
      async (evt) => {
        await this.openJournalView();
      }
    );
    ribbonIconEl.addClass("journaling-ribbon-icon");
    this.addCommand({
      id: "open-journal-view",
      name: "Open Journal View",
      callback: () => {
        this.openJournalView();
      }
    });
    this.addCommand({
      id: "create-todays-journal",
      name: "Create/Open Today's Journal",
      callback: () => {
        this.createTodaysJournal();
      }
    });
    this.addSettingTab(new JournalingSettingTab(this.app, this));
  }
  /**
   * Opens the continuous journal view
   */
  async openJournalView() {
    await this.createTodaysJournal();
    await this.journalView.open();
  }
  /**
   * Creates or opens today's journal entry
   */
  async createTodaysJournal() {
    const date = getTodayDate();
    const fileName = `${date}.md`;
    const file = await getOrCreateJournalFile(
      this.app,
      this.settings.journalFolder,
      fileName
    );
    if (!file) {
      new import_obsidian4.Notice("Failed to create or open today's journal");
      return;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
